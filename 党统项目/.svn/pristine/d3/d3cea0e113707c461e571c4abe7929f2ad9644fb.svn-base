<template>
<div class="box-flex start-box box-orient">
    <div class="info-detail box-flex">
        <Row style="border-bottom: 1px solid #ddd;">
            <Col span="24">
            <p class="box-info">姓名:<span>{{baseInfo.real_name}}</span></p>
            <p class="box-info">身份证号:<span>{{baseInfo.idcard}}</span></p>
            <p class="box-info">原党组织:<span>{{baseInfo.from_dept_name}}</span></p>
            <p class="box-info">目标党组织:<span>{{baseInfo.to_dept_name}}</span></p>
            <p class="box-info">转出组织关系日期:<span>{{baseInfo.out_date}}</span></p>
            <p class="box-info">转出党组织联系方式:<span>{{baseInfo.contact_phone}}</span></p>
            </Col>
        </Row>
        <Row v-if="status == 2">
            <Col span="19" style="margin-left: 20px;">
            <Form :model="orgManageForm" label-position="top">
                <FormItem label="驳回理由：" style="margin-top: 20px;">
                    <Input v-model="reason" type="textarea" :autosize="{minRows: 5,maxRows: 8}" placeholder="党员因私事短期出国、出境或自费出国留学，因办理保留当即手续，其他组织关系保留在原单位党组织。出国出境定居的党员，应办理溶质党籍手续。"></Input>
                </FormItem>
            </Form>
            </Col>
        </Row>
        <Row v-if="status <= 1">
            <Col span="21" style="margin-left: 20px;">
            <Form :model="orgManageForm" :label-width="120" label-position="right">
                <FormItem label="转入党支部：" style="margin-top: 20px;">
                    <Input :disabled='status == 1' v-model="orgManageForm.to_branch_name" type="text" @click.native="popTree"></Input>
                </FormItem>
                <FormItem label="转入组织关系日期：" style="margin-top: 20px;">
                    <DatePicker :disabled='status == 1' type="date" placeholder="选择日期" style="width: 100%;" v-model="orgManageForm.in_date"></DatePicker>
                </FormItem>
                <FormItem label="进入党支部类型：" style="margin-top: 20px;">
                    <Select :disabled='status == 1' placement='top' v-model="orgManageForm.in_type" placeholder="请选择">
                        <Option v-for='item in in_type_list' :key="item.id" :value="item.id" :disabled="item.choosed==0">{{item.name}}</Option>
                    </Select>
                </FormItem>
            </Form>
            </Col>
        </Row>
    </div>
    <div class="info-footer start-box box-align" v-if="status == '0'">
        <div class="box-flex"></div>
        <Button type="primary" style="margin-right: 15px;" @click="handleReset('formValidate')">同意接受</Button>
        <Button type="ghost" style="margin-right: 15px;" @click="reject">驳回</Button>
        <Button type="ghost" @click="handleReset('formValidate')">取消</Button>
    </div>
    <partyTree v-if="treeShow" @setConfirm="setConfirm" @setCancer="setCancer" :setid="setid"></partyTree>
</div>
</template>

<script>
import partyTree from '@/components/pop/org/partyTree.vue'
export default {
    name: 'orgForm',
    data() {
        return {
            isDisable: true,
            in_type_list : [],
            status : 0,
            baseInfo:{
                contact_phone : '',
                from_dept : '',
                from_dept_name : '',
                id : '',
                idcard : '',
                out_date : '',
                real_name : '',
                to_dept : '',
                to_dept_name : '',
            },
            orgManageForm: {
                to_branch_name : '',
                to_branch : '',
                in_date : '',
                in_type : '',
            },
            reason : '',
            treeShow: false,
            setid: '', //编辑的时候传入的id
            ruleValidate: {
                prop_type: [{
                    required: true,
                    message: '党组织代码不能为空',
                    trigger: 'blur'
                }],
            },
            filters:{
                dateFormat(value){
                    if(value==''){return}
                    var date = new Date(+value),
                        Y = date.getFullYear(),
                        m = date.getMonth() + 1,
                        d = date.getDate(),
                        H = date.getHours(),
                        i = date.getMinutes(),
                        s = date.getSeconds();
                    if (m < 10) {
                        m = '0' + m;
                    }
                    if (d < 10) {
                        d = '0' + d;
                    }
                    if (H < 10) {
                        H = '0' + H;
                    }
                    if (i < 10) {
                        i = '0' + i;
                    }
                    if (s < 10) {
                        s = '0' + s;
                    }
                    var t = Y+'-'+ m +'-'+ d;
                    return t;
                }
            },
        }
    },
    props: ['direction'],
    components: {
        partyTree
    },
    watch: {
        '$route' (to, from) {
            this.getInfo(this.$route.params['id'], 1);
            this.getType();
        },

    },
    methods: {
        //党组织类型
        getType() {
            let that = this;
            let qs = require('qs');
            this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'C03043',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => that.in_type_list.push(item))
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
        },
        editBtn() {
            this.isDisable = !this.isDisable;
            this.$store.commit('setEdit', {
                isDisable: this.isDisable
            });
        },
        //驳回
        reject() {
            this.$router.push({
                name: 'partyReject'
            });
        },
        handleSubmit(name) {
            let that = this;
            console.log(this.formValidate);
            let postData = this.formValidate;
            postData.dept_id = this.$route.params['id'];
            postData.opartycodept = this.formValidate.partycode;
            this.$refs[name].validate((valid) => {
                console.log(valid)
                if (valid) {
                    this.isDisable = !this.isDisable; //改变编辑状态
                    let qs = require('qs');
                    this.axios({
                            method: 'get',
                            url: '/v1/dept/modify-dept-base-info',
                            params: postData
                        })
                        .then(res => {
                            let needData = res.data;
                            if (needData.code == 200) {

                            } else {
                                that.$Message.error(needData.msg);
                            }
                        })
                        .catch(err => {
                            this.$Message.error('网络请求异常');
                        })
                } else {
                    this.$Message.error('表单验证失败!');
                }
            })
        },
        popTree() {
            this.treeShow = true;
        },
        setConfirm(item) {
            this.treeShow = false;
            this.orgManageForm.to_branch_name = item.data['name'];
            this.orgManageForm.to_branch = item.data['nid']
        },
        setCancer() {
            this.treeShow = false;
        },
        handleReset(name) {
            this.$router.go(-1)
        },
        getInfo(id, type) {
            let that = this;
            let qs = require('qs');
            this.axios({
                    method: 'get',
                    url: '/v1/relation/detail',
                    params: {
                        id: id ? id : 0,
                        opt: type ? type : 0,
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                       that.baseInfo = Object.assign({},needData.data.detail);
                       that.status = needData.data.detail.status;
                       if(that.status <= 1){
                            for (let key in taht.orgManageForm) {
                                if(key == 'in_date'){
                                    taht.orgManageForm[key] = new Date(needData.data.detail[key])
                                }else{
                                    taht.orgManageForm[key] = needData.data.detail[key];
                                }
                            }
                       }else if(that.status == 2){
                           that.reason = needData.data.detail.reason;
                       }
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(error => {
                    this.$Message.error('网络请求异常');
                })
        },
    },
    created() {

    },
    mounted() {
        let that = this;
        this.$store.commit('setEdit', {
            isDisable: this.isDisable
        });
        this.getInfo(this.$route.params['id'], 1);
        this.getType();
    },
}
</script>

<style scoped>
.box-info {
    line-height: 40px;
    padding-left: 20px;
    color: #333;
    font-size: 12px;
}
</style>
