<template>
<div class="memberinfo-base">
    <div class="memberinfo-form">
        <Form ref="infoform" :label-width="120" :model="formModel" :rules="formValidate">
            <Row>
                <Col span="6">
                    <img src="" alt="" class="memberinfo-avatar">
                </Col>
                <Col span="18">
                    <FormItem label="姓名" :label-width="60" required prop="real_name">
                        <Input v-model="formModel.real_name" :disabled="!editing"></Input>
                    </FormItem>
                    <Row>
                        <Col span="12">
                            <FormItem label="简拼" :label-width="60" required prop="spell_name">
                                <Input v-model="formModel.spell_name" :disabled="!editing"></Input>
                            </FormItem>
                        </Col>
                        <Col span="12">
                            <FormItem label="性别" :label-width="60" required prop="sex">
                                <Select  v-model="formModel.sex" :disabled="!editing">
                                    <Option v-for="item in formFields.sex" :value="item.id" :key="item.id">{{item.name}}</Option>
                                </Select>
                            </FormItem>
                        </Col>
                    </Row>
                    <FormItem label="民族" :label-width="60" required prop="nation">
                        <Select v-model="formModel.nation" :disabled="!editing">
                            <Option v-for="item in formFields.nation" :value="item.id" :key="item.id">{{item.name}}</Option>
                        </Select>
                    </FormItem>
                </Col>
            </Row>
            <FormItem label="籍贯" required prop="native">
                <Cascader v-model="formModel.native" :data="formFields.native" :disabled="!editing"></Cascader>
            </FormItem>
            <FormItem label="出生日期" required prop="birthday">
                <DatePicker v-model="formModel.birthday" type="date" :disabled="!editing" placeholder="选择日期" style="width: 100%"></DatePicker>
            </FormItem>
            <FormItem label="居民身份证号" required prop="idcard">
                <Input v-model="formModel.idcard" :disabled="!editing" placeholder="请输入身份证号"></Input>
            </FormItem>
            <FormItem label="组织关系所在党支部" required prop="dept_id">
                <Select v-model="formModel.dept_id" :disabled="!editing">
                    <Option v-for="item in formFields.dept_list" :value="item.id" :key="item.id">{{item.name}}</Option>
                </Select>
            </FormItem>
            <FormItem label="人事关系所在单位(部门)" required prop="hr_org">
                <Input v-model="formModel.hr_org_name" :disabled="!editing" placeholder="请选择" @click.native="popTree"></Input>

            </FormItem>
            <FormItem label="参加工作日期">
                <DatePicker v-model="formModel.begin_work_date" :disabled="!editing" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
            </FormItem>
            <!-- <FormItem label="专业技术资格">
                <Select v-model="formModel.profession_qualification" :disabled="!editing">
                    <Option v-for="item in formFields.profession_qualification" :value="item.id" :key="item.id">{{item.name}}</Option>
                </Select>
            </FormItem> -->
            <FormItem label="专业技术职务">
                <Select v-model="formModel.profession_duty" :disabled="!editing">
                    <Option v-for="item in formFields.profession_duty" :value="item.id" :key="item.id">{{item.name}}</Option>
                </Select>
            </FormItem>
            <FormItem label="其他党团">
                <Select v-model="formModel.other_party" :disabled="!editing">
                    <Option v-for="item in formFields.other_party" :value="item.id" :key="item.id">{{item.name}}</Option>
                </Select>
            </FormItem>
            <FormItem label="加入其他党团日期">
                <DatePicker v-model="formModel.other_party_time" :disabled="!editing" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
            </FormItem>
            <FormItem label="手机号码">
                <Input v-model="formModel.mobile" :disabled="!editing"></Input>
            </FormItem>
            <FormItem label="住宅电话">
                <Input v-model="formModel.family_phone" :disabled="!editing"></Input>
            </FormItem>
            <FormItem label="家庭住址">
                <Input v-model="formModel.family_address" :disabled="!editing"></Input>
            </FormItem>
            <FormItem label="户口所在派出所">
                <Select v-model="formModel.family_police_station" remote filterable :loading="formFields.family_police_station_loading" :remote-method="querPoliceStation" placement="top" :disabled="!editing">
                    <Option v-for="item in formFields.family_police_station" :value="item.id" :key="item.id">{{item.name}}</Option>
                </Select>
            </FormItem>
        </Form>
    </div>
    <div class="aside-bottom">
        <Button v-show="!editing" @click="editInfo" type="primary">编辑</Button>
        <Button v-show="editing" @click="cancelEdit" type="ghost">取消</Button>
        <Button v-show="editing" @click="save" type="primary">保存</Button>
    </div>
    <infoTree v-if="treeShow" @setConfirm="setConfirm" @setCancer="setCancer" :params='params' :setid="setid"></infoTree>
</div>
</template>
<script>

// TODO: 
// 1.保存接口
// 2.组织关系所在党支部的选择
// 3.人事关系所在单位的选择

import areaData from '@/lib/area.js'
import infoTree from '@/components/pop/baseInfoTypeTree.vue'

export default {
    name : 'memberinfo-base',
    props: {
        viewdata : null
    },
    data(){
        return {
            formModel : {
                hr_org_name                 : '',      //人事单位名称
                real_name                 : '',     // 姓名
                sex                       : '',     // 性别
                spell_name                : '',     // 简拼
                idcard                    : '',     // 身份证号
                native                    : [],     // 籍贯
                nation                    : '',     // 民族
                birthday                  : '',     // 生日
                dept_id                 : '测试支部',     // 组织关系所在党支部
                dept_name                 : '测试支部名称',     // 组织关系所在党支部名称
                hr_org                    : '测试部门',     // 人事关系所在部门
                begin_work_date           : '',     // 参加工作日期
                // profession_qualification  : '',     // 专业技术资格
                profession_duty           : '',     // 专业技术职务
                other_party               : '',     // 该人当前参加的某一党派组织
                other_party_time          : '',     // 该人当前参加的某一党派组织时间
                mobile                    : '',     // 手机号
                family_phone              : '',     // 住宅电话
                family_address            : '',     // 家庭住址\现居住地
                family_police_station     : ''     // 户口所在派出所
            },
            treeShow:false,
            setid: '',//编辑的时候传入的id
            params:{org_id:this.$route.params.dept ? "" : ''},
            treeShow2:false,
            currentData : this.viewdata,
            editing : false, // 编辑状态
            formFields :{
                sex : [{
                    id : '1',
                    name: '男'
                },{
                    id : '2',
                    name: '女'
                }],                       // 性别
                native : areaData,              // 籍贯
                nation : [],                    // 民族
                // profession_qualification : [],  // 专业技术资格
                profession_duty : [],           // 专业技术职务
                other_party : [],                // 其他党团
                family_police_station_loading : false,  // 户口所在派出所加载状态
                family_police_station : [],             // 户口所在派出所
                dept_list : [],//组织关系所在党支部列表
            },
            tempFormData: {},
            formValidate : {
                real_name : { required: true, message: '姓名不能为空', trigger: 'blur' },
                sex : { required: true, message: '请选择性别', trigger: 'blur' },
                spell_name : { required: true, message: '简拼不能为空', trigger: 'blur' }, 
                nation : { required: true, message: '请选择一个民族', trigger: 'blur' }, 
                birthday : { required: true, message: '出生日期不能为空', trigger: 'blur' },
                idcard : [
                    {required: true, message: '身份证号不能为空', trigger: 'blur'},
                    {min: 15, max: 18, message: '请输入15-18位身份证号', trigger: 'blur'},
                ],
                native : {required: true, type: 'array', min:1, max: 3, message: '请选择一个籍贯', trigger: 'change'},
                dept_id : { required: true, message: '请设置组织关系所在的党支部', trigger: 'blur' },
                hr_org : { required: true, message: '请设置人事关系所在单位', trigger: 'blur' }
            },
            filters:{
                dateFormat(value){
                if(value==''){return}
                var date = new Date(+value),
                    Y = date.getFullYear(),
                    m = date.getMonth() + 1,
                    d = date.getDate(),
                    H = date.getHours(),
                    i = date.getMinutes(),
                    s = date.getSeconds();
                    if (m < 10) {
                    m = '0' + m;
                    }
                    if (d < 10) {
                    d = '0' + d;
                    }
                    if (H < 10) {
                    H = '0' + H;
                    }
                    if (i < 10) {
                    i = '0' + i;
                    }
                    if (s < 10) {
                    s = '0' + s;
                    }
                    var t = Y+'-'+ m +'-'+ d;
                    return t;
                }
            },  
        }
    },
    components: {
      infoTree
    },
    computed : {
        editingData(){
            return Object.assign({}, this.formModel);
        }
    },
    methods:{
        getdeptList(){
            let that = this;
            that.axios({
                url:'/v1/dept/get-brother-branch',
                method:'get',
                params:{
                    dept_id : that.$route.params.dept
                },
            })
            .then(res=>{
                let needData = res.data;
                if (needData.code == 200) {
                    that.formFields.dept_list = needData.data;
                } else {
                      that.$Message.error(needData.msg);
                }
            })
            .catch(err=>{
                console.log(err);
                that.$Message.error('网络请求异常');
            })
        },
        popTree() {
          this.treeShow = true;
        },
        setConfirm(item) {
          this.treeShow = false;
          this.formModel.hr_org = item.data.nid;
          this.formModel.hr_org_name = item.data.name;
        },
        setCancer() {
          this.treeShow = false;
        },
        fetchData(id){
            return this.axios({
                method: 'get',
                url: '/v1/member/detail',
                params: {
                    uid: id
                    // uid: 1
                }
            })
        },
        toggleEdit(){
            this.editing = !this.editing
        },
        fetchField(code = ''){
            return this.axios({
                method: 'get',
                url: '/v1/dictionary/get-list-by-type',
                params: {
                    // uid: id
                    type: code
                }
            })
        },
        fetchNationField(){ // 民族
            let _this = this;
            this.fetchField('A01017').then(res => {
                _this.formFields.nation = res.data.data
            });
        },
        fetchSexField(){   // 性别
            let _this = this;
            this.fetchField('A01004').then(res => {
                _this.formFields.sex = res.data.data
            });
        },
        fetchProQualificationField(){  // 专业技术资格
            let _this = this;
            // this.fetchField('A01004').then(res => {
            //     _this.formFields.profession_qualification = res.data.data
            // });
        },
        fetchProDutyField(){  // 专业技术资格
            let _this = this;
            this.fetchField('A06020').then(res => {
                _this.formFields.profession_duty = res.data.data
            });
        },
        fetchOtherPartyField(){  // 其他党团
            let _this = this;
            this.fetchField('DT11').then(res => {
                _this.formFields.other_party = res.data.data
            });
        },
        querPoliceStation(query){
            let _this = this;
            if (query !== '') {
                // console.log(query)
                 _this.formFields.family_police_station_loading = true;
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/police-station-list',
                    params: {
                        // uid: id
                        keywords: query
                    }
                }).then(res => {
                    if (res.data.code == 200) {
                        _this.formFields.family_police_station = res.data.data;
                        _this.formFields.family_police_station_loading = false;
                    };
                }).catch(() => {
                    _this.formFields.family_police_station_loading = false;
                })
            } else {
                // _this.formFields.family_police_station = [];
                _this.formFields.family_police_station_loading = false;
            }
        },
        editInfo(){
            this.tempFormData = Object.assign({}, this.formModel);
            this.formModel = Object.assign({}, this.tempFormData);
            this.toggleEdit();
        },
        cancelEdit(){
            this.formFields.family_police_station = [{
                id : this.tempFormData.family_police_station,
                name : this.tempFormData.family_police_station_desc 
            }];

            // 恢复修改前的值派出所会有问题，这里做个清空处理
            this.formModel.family_police_station = '';

            // 延迟改变默认值
            setTimeout(() => {
                this.formModel = Object.assign({}, this.tempFormData);
            }, 300)
            this.toggleEdit();
            this.$refs['infoform'].resetFields();
        },
        save(){
            // TODO save request
            let that = this;
            let _data = Object.assign({},that.formModel);
            _data.uid = that.$route.params.uid;
            _data.native = _data.native[2];
            let qs = require('qs')
            for (let item in _data) {
                if(item.indexOf('time')>=0||item.indexOf('date')>=0){
                    _data[item] = that.filters.dateFormat(_data[item]);
                }
            }
            that.axios({
                url:'/v1/member/edit',
                method:'post',
                data:qs.stringify(_data)
            })
            .then(res=>{
                let needData = res.data;
                if (needData.code == 200) {
                    that.toggleEdit();
                    that.$Message.success('保存成功')
                } else {
                      that.Message.error(needData.msg);
                }
            })
            .catch(err=>{
                this.Message.error('网络请求异常');
            })
        },
        getDetail(){
            this.fetchData(to.params.uid).then(res => {
                if (res.data.code == 200) {
                    res.data.data.native = new Array(res.data.data.native);
                    // 拼装派出所数据
                    this.formFields.family_police_station = [{
                        id : res.data.data.family_police_station,
                        name : res.data.data.family_police_station_desc 
                    }];
                    setTimeout(() => {
                        this.formModel = Object.assign({}, res.data.data);    
                    }, 300)
                }
                else {
                    this.$Message.error(res.data.msg);
                }
            });
        },
    },
    mounted(){
        let _this = this;
        console.log(_this.formModel);
        
        this.fetchData(this.$route.params.uid).then(res => {
            if (res.data.code == 200) {
                res.data.data.native = new Array(res.data.data.native);
                // console.log(res.data.data);
                // 拼装派出所数据
                this.formFields.family_police_station = [{
                    id : res.data.data.family_police_station,
                    name : res.data.data.family_police_station_desc 
                }];
                setTimeout(() => {
                    this.formModel = Object.assign({}, res.data.data);    
                }, 300)
            }
            else {
                this.$Message.error(res.data.msg);
            }
        });
        // this.fetchNativeField()
        this.fetchNationField();
        // this.fetchSexField();
        this.fetchProQualificationField();
        this.fetchProDutyField();
        this.fetchOtherPartyField();
        this.getdeptList()
    },
    watch :{
        viewdata(newVal, oldVal) {
            this.currentData = newVal
            this.fetchData(this.currentData.id).then(res => {
                if (res.data.code == 200) {
                    res.data.data.native = new Array(res.data.data.native);
                    this.formModel = Object.assign({}, res.data.data);
                } else {
                    this.$Message.error(res.data.msg);
                }
            })
        },
        '$route' (to, from) {
            if(to.name=="dangyuanout"){return}
            this.fetchData(to.params.uid).then(res => {
                if (res.data.code == 200) {
                    res.data.data.native = new Array(res.data.data.native);
                    // console.log(res.data.data);
                    // 拼装派出所数据
                    this.formFields.family_police_station = [{
                        id : res.data.data.family_police_station,
                        name : res.data.data.family_police_station_desc 
                    }];
                    setTimeout(() => {
                        this.formModel = Object.assign({}, res.data.data);    
                    }, 300)
                }
                else {
                    this.$Message.error(res.data.msg);
                }
            });
        }
    }
}
</script>
<style scoped>
.memberinfo-base{
    height: 100%;
}
.memberinfo-form{
    padding: 20px 8px 50px 8px;
}
.memberinfo-avatar{
    display: block;
    margin: auto;
    width: 85px;
    height: 120px;
    vertical-align: middle;
}
.aside-bottom{
    position: absolute;
    bottom: 0;
    width: 100%;
    border-top: 1px solid #ddd;
    padding: 8px;
    text-align: right;
    background-color: #f8f8f8;
}
</style>