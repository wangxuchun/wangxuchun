<template>
<div class="memberinfo-train">
    <div class="memberinfo-form" style="min-height:550px">
        <Form :label-width="0" ref="infoform" :model="infoform" label-position="top" :rules="ruleValidate">
            <Row>
                <Col span="11"offset='1'>
                    <FormItem label="申请入党日期"   prop="apply_date">
                        <DatePicker :disabled="!editing" v-model="infoform.apply_date" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
                    </FormItem>
                    <FormItem label="参加培训日期"  prop="train_date">
                        <DatePicker :disabled="!editing || !editArray[2]" v-model="infoform.train_date" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
                    </FormItem>
                    <FormItem label="入党日期"  prop="party_date">
                        <DatePicker :disabled="!editing || !editArray[4]" v-model="infoform.party_date" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
                    </FormItem>
                </Col>
                <Col span="11" offset='1'>
                    <FormItem label="列为积极份子日期"  prop="active_date">
                        <DatePicker :disabled="!editing || !editArray[1]" v-model="infoform.active_date" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
                    </FormItem>
                    <FormItem label="列为发展对象日期"  prop="develop_date">
                        <DatePicker :disabled="!editing || !editArray[3]" v-model="infoform.develop_date" type="date" placeholder="选择日期" style="width: 100%"></DatePicker>
                    </FormItem>
                    <FormItem label="入党类型"  prop="join_source">
                        <Select clearable v-model="infoform.join_source" :disabled="!editing || !editArray[5]" placement="top">
                            <Option v-for='item in join_source_list' :key="item.id" :value="item.id" :disabled="item.choosed==0">{{item.name}}</Option>
                        </Select>
                    </FormItem>
                </Col>
            </Row>
        </Form>
    </div>
    <div class="aside-bottom" v-show="editable">
        <Button v-show="!editing" @click="toggleEdit" type="primary">编辑</Button>
        <Button v-show="editing" @click="cancelEdit" type="ghost">取消</Button>
        <Button v-show="editing" @click="save('infoform')" type="primary">保存</Button>
    </div>
</div>
</template>
<script>
export default {
    name : 'memberinfo-train',
    props: {
        viewdata : null,
        editable : {
            type : Boolean,
            default : true
        }
    },
    data(){
        return{
            infoform : {
                apply_date:'',
                active_date:'',
                train_date:'',
                develop_date:'',
                party_date:'',
                join_source:'',
            },
            editArray:[true,false,false,false,false,false],
            resetArray:['apply_date','active_date','train_date','develop_date','party_date','join_source'],
            editing:false,
            oldData:{},
            join_source_list:[],
            url:'/v1/member/recruit-edit',
            uid:this.$route.params.uid,
            ruleValidate: {
                apply_date:[
                    {required: true,type:'date', message: '申请入党日期不能为空', trigger: 'change'}
                ],
            },     
            filters:{
                dateFormat(value){
                    if(value==''){return}
                    var date = new Date(+value),
                        Y = date.getFullYear(),
                        m = date.getMonth() + 1,
                        d = date.getDate(),
                        H = date.getHours(),
                        i = date.getMinutes(),
                        s = date.getSeconds();
                    if (m < 10) {
                        m = '0' + m;
                    }
                    if (d < 10) {
                        d = '0' + d;
                    }
                    if (H < 10) {
                        H = '0' + H;
                    }
                    if (i < 10) {
                        i = '0' + i;
                    }
                    if (s < 10) {
                        s = '0' + s;
                    }
                    var t = Y+'-'+ m +'-'+ d;
                    return t;
                }
            }
        }
    },
    watch:{
       'infoform.apply_date' (newV,oldV){         
           if(newV!=""){
                this.setEditArray(0)
           }else{
                this.clearEditArray(0);
                this.resetInfoform(0)
           }
       },
       'infoform.active_date' (newV,oldV){
           if(newV!=""){
                this.setEditArray(1)
           }else{
                this.clearEditArray(1)
                this.resetInfoform(1)
           }
       },
       'infoform.train_date' (newV,oldV){
           if(newV!=""){
                this.setEditArray(2)
           }else{
                this.clearEditArray(2)
                this.resetInfoform(2)
           }
       },
       'infoform.develop_date' (newV,oldV){
           if(newV!=""){
                this.setEditArray(3)
           }else{
                this.clearEditArray(3)
                this.resetInfoform(3)
           }
       },
       'infoform.party_date' (newV,oldV){
           if(newV!=""){
                this.setEditArray(4)
           }else{
                this.clearEditArray(4)
                this.resetInfoform(4)
           }
       },
       'infoform.join_source' (newV,oldV){
           if(newV!=""){
                this.setEditArray(5)
           }else{
                this.clearEditArray(5)
                this.resetInfoform(5)
           }
       }
    },
    methods:{
        resetInfoform(index){
            let that = this;
            let _index = index;
           that.resetArray.forEach(function(item,index) {
               if(index > _index){
                   that.infoform[item] = "";
               }
           });
        },
        setEditArray(index){
            this.editArray[index+1] = true;
        },
        clearEditArray(index){
            let _index = index;
            this.editArray = this.editArray.map(function(x,index){
                return index > _index ? false : x
            });
        },
        getList(type,arr){
            let that = this;
            let qs = require('qs');
            if(that[arr].length>1){
                return
            }
            that.axios({
                method : 'get',
                url : 'v1/dictionary/get-list-by-type',
                params:{
                    type:type
                },
            })
            .then(res=>{
                let needData = res.data;
                if (needData.code == 200) {
                setTimeout(()=>{
                            that[arr] = needData.data;
                },200)
                } else {
                    that.$Message.error(needData.msg);
                }
            })
            .catch(err => {
                this.$Message.error('网络请求异常');
            });
        },
        getData(){
            let that = this;
            that.axios({
                url:'/v1/member/recruit-detail',
                method:'get',
                params:{
                    uid:that.$route.params.uid,
                    opt:1,
                },
            })
            .then(res=>{
                let needData = res.data;
                if (needData.code == 200) {
                    for (let key in needData.data ) {
                        
                        if(key.indexOf('time')>=0||key.indexOf('date')>=0){
                           if( needData.data[key]!=""){
                                needData.data[key] = new Date(needData.data[key]);
                           }else{
                               
                           }
                       }
                    }
                    that.infoform = Object.assign({},needData.data);
                    that.oldData =  Object.assign({},needData.data);

                } else {
                    that.Message.error(needData.msg);
                }
            })
            .catch(err=>{
                this.Message.error('网络请求异常');
            })
        },
        toggleEdit(){
            this.editing = !this.editing
        },
        cancelEdit(){
            // 延迟改变默认值
            setTimeout(() => {
                this.infoform = Object.assign({}, this.oldData);
            }, 300)
            this.toggleEdit();
        },
        save(name){           
            // TODO save request
            let that = this;
            this.$refs[name].validate((valid) => {
                if (valid) {
                    let qs = require('qs');
                    let _data = Object.assign({},this.infoform);
                    _data['uid'] = that.uid;                   
                    for (let key in _data ) {
                       if(key.indexOf('time')>=0||key.indexOf('date')>=0){
                            if(_data[key]!=""){
                                _data[key] = that.filters.dateFormat(_data[key]);
                            }   
                       }
                    }
                    if(_data.party_date!=""&&_data.join_source==""){
                        that.$Message.warning('请填写入党类型');
                        return
                    }
                    that.axios({
                        method : 'post',
                        url : that.url,
                        data:qs.stringify(_data)
                    })
                    .then(res=>{
                        let needData = res.data;
                        if (needData.code == 200) {
                        setTimeout(()=>{
                            if(needData.msg!="" && needData.msg!='ok'){
                                that.$Message.success(needData.msg)
                            }else{
                                that.$Message.success('提交成功!')
                            };
                            that.toggleEdit();
                        },200)
                        } else {
                            that.$Message.error(needData.msg);
                        }
                    })
                    .catch(err => {
                        this.$Message.error('网络请求异常');
                    });

                } else {
                    this.$Message.error('表单验证失败!');
                }
            });
        },
    },
    mounted(){
        this.getList('C03043','join_source_list');
        this.getData();
    },
}
</script>
<style scoped>
.memberinfo-train{
    height: 100%;
}
.memberinfo-form{
    padding: 20px 8px 50px 8px;
}
.memberinfo-avatar{
    display: block;
    margin: auto;
    width: 85px;
    height: 120px;
    vertical-align: middle;
}
.aside-bottom{
    position: absolute;
    bottom: 0;
    width: 100%;
    border-top: 1px solid #ddd;
    padding: 8px;
    text-align: right;
    background-color: #f8f8f8;
}
</style>
