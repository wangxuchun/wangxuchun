<template>
        <div id="login">
            <h1 class="login-title">登陆</h1>
            <Row type="flex" justify="center" class="code-row-bg">
                <Col span="8">
                    <Form ref="loginForm" :model="loginForm" :rules="formValidate" :label-width="80">
                        <Form-item label="用户名" prop="username">
                            <Input type="text" v-model="loginForm.username"></Input>
                        </Form-item>
                        <Form-item label="密码" prop="passwd">
                            <Input type="password" v-model="loginForm.passwd"></Input>
                        </Form-item>
                        <Form-item>
                            <Button type="primary" @click="handleSubmit('loginForm')">登录</Button>
                            <Button type="ghost" @click="handleReset('loginForm')" style="margin-left: 8px">重置</Button>
                        </Form-item>
                    </Form>
                </Col>
            </Row>
        </div>
</template>
<style scoped>
    #login{
        position: absolute;
        top: 50%;
        margin: auto;
        width: 100%;
        transform:translateY(-50%);
        -ms-transform:translateY(-50%);
        -moz-transform:translateY(-50%);
        -webkit-transform:translateY(-50%);
        -o-transform:translateY(-50%);
    }
    .login-title{
        margin-bottom: 24px;
        text-align: center;
    }
</style>
<script>
    export default {
        name: 'login',
        data () {
            const validateUser = (rule, value, callback) =>{
                if (value === '') {
                    callback(new Error('请输入用户名'));
                }
                callback();
            }
            const validatePass = (rule, value, callback) => {
                if (value === '') {
                    callback(new Error('请输入密码'));
                } 
                callback();
            };
            return {
                loginForm: {
                    username: '',
                    passwd: '',
                },
                formValidate: {
                    username: [
                        { validator: validateUser, trigger: 'blur'}
                    ],
                    passwd: [
                        { validator: validatePass, trigger: 'blur' }
                    ]
                }
            }
        },
        methods: {
            getUrl() {
                let result = window.location.hash;
                let re = /redirect=/;
                if (re.test(result)) {
                    return decodeURIComponent(result.split('redirect=')[1]);
                } else {
                    return null;
                }
            },
            handleSubmit (name) {
                let that = this;
                this.$refs[name].validate((valid) => {
                    if (valid) {
                        let qs = require('qs');   
                        this.axios({
                            method: 'post',
                            url: '/v1/user/login',
                            data: qs.stringify({
                                username: that.loginForm.username,
                                password: that.loginForm.passwd
                            })
                        })
                        .then(res => {
                            let needData = res.data;
                            if (needData.code == 200) {
                                that.$Message.success('登录成功!');
                                this.$store.commit('setToken', 'this is token');
                                setTimeout(function() {
                                    let redirect = that.getUrl() ? that.getUrl('redirect') : '/';
                                    window.location = '#'+redirect;
                                }, 1000)
                            } else {
                                that.$Message.error(needData.msg);
                            }
                        })
                        .catch(err => {
                            that.$Message.error("网络请求错误");
                        })
                    } else {
                        this.$Message.error('表单验证失败!');
                    }
                })
            },
            handleReset (name) {
                localStorage.removeItem("djwtoken");
                this.$refs[name].resetFields();
            }
        },
        mounted() {   
            var that = this;
        }
    }
</script>