<template>
    <div class="app-main" :style="{'width':'100%','height':'100%'}">
        <div class="layout start-box box-orient" :style="{'width':'100%','height':'100%'}">
            <!-- 头部 -->
            <top></top>
            <Row type="flex" class="box-flex">
                <!-- 侧边栏树结构 -->
                <i-col span="4" class="layout-menu-left">
                    <Slide ref="slide" 
                        @reflashList="reflashList" 
                        @getnode="getnode"
                        @slideDown="slideDown"
                        :url="url"
                        :openitem="openitem"
                        :currentnode="currentnode"
                        :openlist="openlist"
                        >
                    </Slide>
                </i-col>
                <i-col span="20" class="start-box box-orient">
                    <!-- 筛选结构 -->
                    <subNav @allControl="fromControl"></subNav>
                    <!-- 表单主结构 -->
                    <div class="content-padding start-box box-flex">
                        <div class="form-slides start-box box-orient">
                            <div class="slides-top start-box box-pack">
                                <Select style="width:100px" :placeholder="default1" v-model="classify" @on-change="typeF">
                                    <Option v-for="item in classifyList" :value="item.id" :key="item.id">{{ item.name }}</Option>
                                </Select>
                                <Select style="width:100px" :placeholder="default2" @on-change="collectionF">
                                     <Option v-for="item in cityList" :value="item.id" :key="item.id">{{ item.name }}</Option>
                                </Select>
                            </div>
                            <div class="slides-content box-flex">
                                <ul class="slide-list">
                                    <li class="item" v-for="(item, index) in paperList" :class="{'item-active': item.active}" @click="goDetail(item, index)">{{item.label}}</li>
                                </ul>
                            </div>
                        </div>
                        <div class="form-table box-flex" style="position:realtive;overflow:auto;">
                            <router-view :orders="orders"></router-view>
                        </div>
                    </div>
                </i-col>
            </Row>
        </div>
        <pop :controls="controls"  @cancel="cancel"></pop>
    </div>
</template>
<script>
    import top from '@/components/top.vue'
    import Slide from '@/components/slide.vue'
    import subNav from './nav.vue'
    // import tbs from '@/components/tables/tables2.vue'
    import pop from '@/components/pop/countMore.vue'
    export default {
        name: 'countForm',
        data() {
            return {
                controls: false,
                orders: {},
                classify: '',
                classifyList: [],
                default1:'',
                default1Id: '',
                default2: '',
                default2Id: '',
                url: '/v1/trees/search-list',
                openitem: [],
                openlist: [],
                currentnode: '',
                searchString: '',
                cityList: [],
                model1: '',
                paperList: [
                        // {label: '封面', active: true, id: 1, path: 'form1'}, 
                        // {label: '2表：党员基本情况', active: false, id: 2,path: 'form2'},
                        // {label: '3表：党员入党时间', active: false, id: 3,path: 'form3'},
                        // {label: '4表：党员学历情况', active: false, id: 4,path: 'form4'},
                        // {label: '23表：城市街道、社区（居委会）、社会组织发展党员工作情况', active: false, id: 23,path: 'form23'},
                        // {label: '24表：党的基层组织数量情况和换届情况', active: false, id: 24,path: 'form24'},
                        // {label: '25表：街道、社区（居委会）、乡镇、建制村法人单位建立党的基层组织情况', active: false, id: 25,path: 'form25'},
                        // {label: '26表：公有经济控制的企业法人单位建立党的基层组织情况', active: false, id: 26,path: 'form26'},

                    ]
            }
        },
        computed: {
        },
        watch: {
            '$route' (to, from) {
                
            }
        },
        components: {
            top,
            Slide,
            subNav,
            // tbs,
            pop
        },
        methods: {
            fromControl(item) {
                this.orders = Object.assign({}, item);
                switch(parseInt(item.type)) {
                    case 1:  break;
                    case 2: console.log('报表直统');
                        this.controls = true;
                    break;
                    case 3: console.log('报表汇总');this.controls = true; break;
                    case 4: console.log('报表校核'); 
                        let url = window.location.port ? window.location.hostname+':'+window.location.port : window.location.hostname;
                        window.open('http://'+url+'/#'+item.value);
                    break;
                    case 5: console.log('打印'); break;
                    case 6: console.log('导出'); break;
                    case 7: console.log('上所解锁'); break;
                    case 8: console.log('开始录制'); break;
                    case 9: console.log('保存报表'); break;
                    default: return;
                }
            },
            cancel() {
                this.controls = false;
            },
            slideDown() {
                console.log('jieshu')
            },
            //查看报表的详情
            goDetail(row, index) {
                console.log(row)
                event.stopPropagation();
                this.paperList.forEach(item => item.active = false)
                row.active = true;

                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'post',
                    url: '/v1/report/detail',
                    data: qs.stringify({
                        year: '2017',
                        type_id: this.default1Id,
                        dept_id: this.$store.state.remberId,
                        form_id: row.id
                    })
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        localStorage.setItem('formData', JSON.stringify(needData.data));
                        this.$router.push({'name':'form-'+(row.id), params: needData.data});
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            // tree emit events（events up）
            reflashList(item) {

            },

            getnode(node) {
                // console.log(node)
            },
            reflash() {

            },
            getTypeList() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/report/get-type-list',
                    params: {
                        opt: 0
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => {
                            that.classifyList.push(item);
                        })
                        // that.classifyList = Object.assign([], needData.data);
                        that.collectionList(that.classifyList[0].id);
                        that.default1 = that.classifyList[0].name;
                        that.default1Id = that.classifyList[0].id;

                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            collectionList(id) {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/report/get-sets-list',
                    params: {
                        type_id: id,
                        opt: 0
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => {
                            this.cityList.push(item) 
                        })
                        that.default2 = that.cityList[0].name;
                        that.default2Id = that.cityList[0].id;
                        that.getList(id, that.cityList[0].id);
                        // this.cityList = Object.assign([], needData.data)
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            //报表列表
            getList(id, ids) {
                let that = this;
                this.axios({
                    method: 'get',
                    url: '/v1/report/get-form-list',
                    params: {
                        type_id: id,
                        set_id: ids,
                        opt: 0
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach((item, index) => {
                            let temp = {};
                            temp.id = item.id;
                            temp.label = item.remark+"："+item.name;
                            temp.active = false;
                            temp.path = 'form'+(index+1);
                            that.paperList.push(temp)
                        })
                        this.$nextTick(() => {
                            let params = this.$route.name.split('-')[1];
                            if (params) {
                                this.paperList.forEach((item, index) => {
                                    item.active = false
                                    if(item.id == params) {
                                        that.paperList[index].active = true;
                                    }
                                })
                            };
                        })
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            typeF(val) {
                this.collectionList(val);
            },
            collectionF(val) {
                this.getList(this.default1Id, val)
            },
            //报表详情
            formDetail() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/report/detail',
                    data: qs.stringity({
                        year: '2016',
                        type_id: this.default1Id,
                        dept_id: this.$store.state.remberId,
                        form_id: this.default2Id
                    })
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            }

        },
        created() {
                
        },
        mounted() {
            
            let that = this;
            this.getTypeList();

                
        },
    }
</script>
<style scope>
    .ivu-select-placeholder {
        color: #495060 !important;
    }
    .form-slides {
        width: 220px;
        border: 1px solid #dddee1;
    }
    .form-slides .slides-top {
        padding: 5px;
        border-bottom: 1px solid #dddee1;
    }
    .slide-list .item {
        /*width: 200px;*/
        height: 40px;
        line-height: 40px;
        padding-left: 8px;
        background-color: #fff;
        border-bottom: 1px solid #dddee1;
        width: 100%;
        white-space: nowrap;
        text-overflow:ellipsis;
        overflow: hidden;
        cursor: pointer;
    }
    .slide-list .item.item-active {
        background: #edf7ff;
    }
    .slide-list .item:hover {
        background: #edf7ff;
    }
    .form-slides .slides-content {
        padding-bottom: 20px;
        background: #fff;
        overflow: auto;
    }
    .form-table {
        border: 1px solid #dddee1;
        margin-left: 6px;
        background: #fff;
    }
    .togoole-enter-active {
        transition: all 0.3s;
    }
    .togoole-leave-active {
        transition: all 0.3s;
    }
    .slides-enter-active {
      transition: all .3s ease;
    }
    .slides-leave-active {
      transition: all .8s ease;
    }
    .slides-enter, .slides-leave-to
    {
      transform: translateX(800px);
      opacity: 0;
    }
</style>