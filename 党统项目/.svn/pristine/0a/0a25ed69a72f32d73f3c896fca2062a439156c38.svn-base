<template>
    <div class="box-flex start-box box-orient">
        <div class="info-detail box-flex">
            <Form ref="formValidate" :model="formValidate" :rules="ruleValidate" :label-width="0">
                <Row>
                    <Col span="24">
                        <FormItem class="reset-style" label="党组织代码" prop="partycode">
                            <Input v-model="formValidate.partycode" :disabled="isDisable" placeholder="请输入党组织代码" :maxlength="3">
                                <span slot="prepend">{{front}}</span>
                            </Input>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="12">
                        <FormItem class="reset-style" label="党组织名称" prop="name">
                            <Input v-model="formValidate.name" :disabled="isDisable" placeholder="请输入邮箱"></Input>
                        </FormItem>
                    </Col>
                    <Col span="12">
                        <FormItem class="reset-style" label="批准建立党组织日期" prop="found_time">
                            <DatePicker :style="{'width' : '100%'}" type="date" placeholder="选择日期" :disabled="isDisable" v-model="formValidate.found_time"></DatePicker>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="12">
                        <FormItem class="reset-style" label="党组织类型" prop="type_id">
                          <Cascader :data="dataType" v-model="formValidate.type_id" :disabled="isDisable"></Cascader>
                        </FormItem>
                    </Col>
                    <Col span="12">
                        <FormItem class="reset-style" label="党组织属地关系" prop="affiliation_id">
                            <Cascader :disabled="isDisable" :data="realtive" v-model="formValidate.affiliation_id"></Cascader>
                            <!-- <Select v-model="formValidate.affiliation_id" :disabled="isDisable" placeholder="请选择党组织属地关系">
                                <Option v-for="item in realtive" :disabled="item.choosed==0 ? true :false" :value="item.id" :key="item.id">{{item.name}}</Option> -->
                            </Select>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="12">
                        <FormItem class="reset-style" label="本届班子当选时间" prop="start_time">
                            <DatePicker :style="{'width' : '100%'}" type="date" placeholder="选择日期" :disabled="isDisable" v-model="formValidate.start_time"></DatePicker>
                        </FormItem>
                    </Col>
                    <Col span="12">
                        <FormItem class="reset-style" label="本届班子届满日期" prop="end_time">
                          <DatePicker :style="{'width' : '100%'}" type="date" :disabled="isDisable"placeholder="选择日期" v-model="formValidate.end_time"></DatePicker>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="12">
                        <FormItem class="reset-style" label="选举方式" prop="vote_way">
                            <Select v-model="formValidate.vote_way" :disabled="isDisable" placeholder="请选择选举方式">
                                <Option v-for="item in voteStyle" :key="item.id" :value="item.id">{{item.name}}</Option>
                            </Select>
                        </FormItem>
                    </Col>
                    <Col span="12">
                        <FormItem class="reset-style" label="任期年限" prop="gap">
                            <Input v-model="formValidate.gap" :disabled="isDisable" placeholder="请输入任期年限"></Input>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="12">
                        <FormItem class="reset-style" label="选举应到会人数" prop="vote_due">
                            <Input v-model="formValidate.vote_due" :disabled="isDisable" placeholder="请输入选举应到会人数"></Input>
                        </FormItem>
                    </Col>
                    <Col span="12">
                        <FormItem class="reset-style" label="选举实到会人数" prop="vote_actual">
                            <Input v-model="formValidate.vote_actual" :disabled="isDisable" placeholder="请输入选举实到会人数"></Input>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="12">
                        <FormItem class="reset-style" label="上级核定委员名额" prop="leadernum">
                            <Input v-model="formValidate.leadernum" :disabled="isDisable" placeholder="请输入核定委员数"></Input>
                        </FormItem>
                    </Col>
                    <Col span="12">
                        <FormItem class="reset-style" label="实有委员数" prop="">
                            <Input v-model="formValidate.haved_leaders" :disabled="true" placeholder="请输入实有委员数"></Input>
                        </FormItem>
                    </Col>
                </Row>
                <Row>
                    <Col span="24">
                        <FormItem class="reset-style" v-if="this.$route.query.del==1" label="撤销日期:" prop="history_time">
                          <DatePicker :style="{'width' : '100%'}" :disabled="isDisable" type="date" placeholder="选择撤销日期" v-model="formValidate.history_time"></DatePicker>
                        </FormItem>
                    </Col>
                </Row>  
            </Form>
        </div>
        <div class="info-footer start-box box-align">
            <div class="box-flex"></div>
            <Button type="ghost" style="margin-right: 15px;"  @click="handleReset('formValidate')">取消</Button>
            <Button v-show="isDisable" type="primary" @click="editBtn">编辑</Button>
            <Button v-show="!isDisable" type="error" @click="handleSubmit('formValidate')">保存</Button>
        </div>
        <TypeTree v-if="treeShow" @setConfirm="setConfirm" @setCancer="setCancer" :params="params" :setid="setid"></TypeTree>
    </div>
</template>

<script>
    import TypeTree from '@/components/pop/baseInfoTypeTree.vue'
    export default {
        name: 'info',
        data() {
            return {
                isDisable:true,
                treeShow:'',
                setid: '',//编辑的时候传入的id
                params:{type:'D01021'},
                formValidate: {
                    partycode: '',
                    name: '',
                    type_id: [],
                    affiliation_id: [],
                    found_time: '',
                    is_flow: '',
                    start_time: '',
                    gap: '',
                    end_time: '',
                    vote_way: '',
                    vote_due: '',
                    vote_actual: '',
                    leadernum: '',
                    haved_leaders: '',
                    history_time: '',
                },
                dataType:[],
                ruleValidate: {
                    partycode: [{
                        required: true, message: '党组织代码不能为空', trigger: 'blur'
                    }],
                    name: [
                        { required: true, message: '党组织名称不能为空', trigger: 'blur' }
                    ],
                    type_id: [
                        { required: true, type: 'array', min: 1, message: '请选择党组织类型', trigger: 'change' }
                    ],
                    affiliation_id: [
                        { required: true, type: 'array', min: 1, message: '请选择党组织属地关系', trigger: 'change' }
                    ],
                    found_time: [
                        { required: true, type: 'date', message: '批准建立党组织日期时间不能为空', trigger: 'change' }
                    ],
                    is_flow: [
                        { required: true, message: '党支部标识不能为空', trigger: 'blur' }
                    ],
                    start_time: [
                        { required: true, type: 'date', message: '请选择本届班子当选时间', trigger: 'change' }
                    ],
                    gap: [
                        { required: true, message: '任期年限不能为空', trigger: 'blur' }
                    ],
                    end_time: [
                        { required: true, type: 'date', message: '请选择届满时间', trigger: 'change' }
                    ],
                    vote_way: [
                        { required: true, message: '请选择选举方式', trigger: 'change' }
                    ],
                    vote_due: [
                        { required: true, message: '选举实到会人数不能为空', trigger: 'change' }
                    ],
                    vote_actual: [{
                        required: true, message: '选举应到会人数不能为空', trigger: 'blur'
                    }],
                    leadernum: [{
                        required: true, message: '核定委员数不能为空', trigger: 'blur'
                    }],
                    haved_leaders: [{
                        required: true, message: '实有委员数不能为空', trigger: 'blur'
                    }],
                    history_time: [{
                        required: true, type: 'date', message: '撤销日期不能为空', trigger: 'change'
                    }],
                },
                datas: this.infodata,
                dangType: [],
                realtive: [],
                voteStyle: [],
                front: ''
            }
        },
        props: ['infodata'],
        components: {
          TypeTree
        },
        watch: {
            '$route' (to, from) {
                this.getInfo(this.$route.params['id'],1);
                this.getType();
                this.getRealtive();
                this.getVote();
            },
        },
        methods: {
            setStr(val) {
                return val > 9 ? val : '0'+val;
            },
            getDate(obj) {
                if (obj == '') {
                    return  '';
                } else {
                    return obj.getFullYear()+'-'+( this.setStr( obj.getMonth()+1 ) )+'-'+this.setStr(obj.getDate());
                }
            },
            //党组织类型
            getType() {
                let that = this;
                let qs = require('qs');
                if (that.dataType.length) {
                    return;
                };
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'D01021',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    //重新组装data数据
                    that.dataType = [];
                    if (needData.code == 200) {
                        needData.data.forEach(item => {
                            that.dataType.push(item);
                        });
                    } else {
                      this.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            //获取组织类型tree
            getTypeTree(){
              this.treeShow=true;
            },
            setConfirm(item) {
              this.treeShow = false;
              this.RewardFormItem.organization = item.data['name'];
            },
            setCancer() {
              this.treeShow = false;
            },
            //组织属地关系
            getRealtive() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'D01022',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => that.realtive.push(item))
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            //选举方式
            getVote() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'KZ13',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => that.voteStyle.push(item))
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            editBtn() {
              this.isDisable = !this.isDisable;
              this.$store.commit('setEdit', {isDisable: this.isDisable});
            },
            handleSubmit (name) {
                let that = this;
                let postData = Object.assign({},this.formValidate);
                this.$refs[name].validate((valid) => {
                    if (valid) {
                        this.isDisable = !this.isDisable;//改变编辑状态
                        let qs = require('qs');
                        postData.dept_id = this.$route.params['id'];
                        postData.leadernum = this.formValidate.leadernum;
                        postData.affiliation_id = this.formValidate.affiliation_id[this.formValidate.affiliation_id.length-1];
                        postData.opartycodept = this.formValidate.partycode;

                        postData.type_id = this.formValidate.type_id[this.formValidate.type_id.length-1];
                        postData.affiliation_id = this.formValidate.affiliation_id[this.formValidate.affiliation_id.length-1];
                        
                        postData.found_time = this.getDate(this.formValidate.found_time);
                        postData.start_time = this.getDate(this.formValidate.start_time);
                        postData.end_time = this.getDate(this.formValidate.end_time);
                        postData.history_time = this.getDate(this.formValidate.history_time);
                        this.axios({
                            method: 'post',
                            url: '/v1/dept/modify-dept-base-info',
                            // params: postData
                            data: qs.stringify(postData)
                        })
                        .then(res => {
                            let needData = res.data;
                            if (needData.code == 200) {
                              this.$Message.success('提交成功!');
                              this.isDisable=!this.isDisable;
                              this.$store.commit('setStrict')
                              this.$store.commit('setFlash2', {type: 1})
                              this.$router.go(-1)
                            } else {
                                that.$Message.error(needData.msg);
                            }
                        })
                        .catch(err => {
                            this.$Message.error('网络请求异常');
                        })
                    } else {
                        this.$Message.error('表单验证失败!');
                    }
                })
            },
            handleReset (name) {
                this.$refs[name].resetFields();
                this.$router.go(-1)
            },
            getInfo(id, type) {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dept/detail',
                    params: {
                        dept_id: id ? id : 0,
                        opt: type ? type : 0,
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                      that.datas = needData.data;
                        that.front = that.formValidate.partycode = that.datas.partycode.substring(0,that.datas.partycode.length-3);
                        that.formValidate.partycode = that.datas.partycode.substring(that.datas.partycode.length-3);
                        that.formValidate.name = that.datas.name;
                        that.formValidate.type_id = that.datas.type_id_array.map(item => {
                            return item.id;
                        })
                        // that.dataType = [{value:that.datas.type_id,label:that.datas.type}];
                        that.formValidate.affiliation_id = that.datas.affiliation_id_array.map(item => {
                            return item.id;
                        });

                        that.formValidate.found_time = that.datas.found_time ? new Date(that.datas.found_time) : '';
                        that.formValidate.is_flow = that.datas.is_flow;
                        that.formValidate.start_time = that.datas.start_time ? new Date(that.datas.start_time) : '';
                        that.formValidate.gap = that.datas.gap;
                        that.formValidate.end_time = that.datas.end_time ? new Date(that.datas.end_time) : '';
                        that.formValidate.vote_way = that.datas.vote_way == 0 ? '' : that.datas.vote_way;
                        that.formValidate.vote_due = that.datas.vote_due == 0 ? '' : that.datas.vote_due;
                        that.formValidate.vote_actual = that.datas.vote_actual == 0 ? '' : that.datas.vote_actual;
                        that.formValidate.leadernum = that.datas.leadernum;
                        that.formValidate.haved_leaders = that.datas.haved_leaders;
                        that.formValidate.history_time =  that.datas.history_time ? new Date(that.datas.history_time) : '';
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
        },
        created() {

        },
        mounted() {
            let that = this;
            this.$store.commit('setEdit', {isDisable: this.isDisable});
            this.getInfo(this.$route.params['id'], 1);
            this.getType();
            this.getRealtive();
            this.getVote();
            this.getType();
            console.log(this.$route.query.del)
        },
    }
</script>
<style scoped>
    .info-detail {
        padding: 0 15px;
    }
</style>
