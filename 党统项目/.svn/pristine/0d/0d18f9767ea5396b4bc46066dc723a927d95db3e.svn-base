<template>
    <div class="layout" :style="{'width':'100%','height':'100%'}">
        <!-- 头部 -->
        <top></top>
        <Row type="flex" class="setHeight">
            <!-- 侧边栏树结构 -->
            <i-col span="5" class="layout-menu-left">
                <Slide ref="slide" url="/v1/trees/members-trees" :currentnode="nodeSelect" :openitem="openitem" :openlist="nodeOpen" @slideDown="slideDown" @reflashList="reflashList"></Slide>
            </i-col>
            <i-col span="19" class="layout-right-container">
                <!-- 表单主结构 -->
                <div class="layout-content" style="position:realtive;">
                    <div class="content-padding">
                        <!-- 搜索和过滤 -->
                        <div class="set-config">
                            <div class="task-step">
                                <div v-for="(item, index) in navData" @click="active(index)" :style="{zIndex: item.zindex}" :class="{active:item.active == true}"><span>{{ item.name }}</span></div>
                            </div>
                        </div>
                        <div class="search-filter start-box box-align">
                            <div class="search-content start-box box-align box-flex">
                                <Input v-model="searchString" placeholder="姓名/身份证/手机" @on-keyup.enter="search" :style="{'display':'block', 'width':'200px','marginRight':'10px'}"></Input>
                                <Button type="primary" @click="search">查询</Button>
                            </div>
                        </div>
                        <!-- /end 搜索和过滤 -->
                        <div class="start-box" style="border:1px solid #ddd;min-height:300px;margin-top:20px;">
                            <div class="" style="width:100px">
                                <Table ref="membertable" :highlight-row="true" @on-row-click="onTableSelect" :no-data-text="tableTxt" :style="{'minHeight':'500px','marginTop':'-1px','marginLeft':'-1px',}" border :columns="tableCol" :data="lists"></Table>
                            </div>
                            <div class='box-flex' style="padding:10px">
                                <tab ref="ch" :users="user_step"></tab>
                            </div>
                        </div>

                    </div>
                </div>
                <!-- /end 表单主结构 -->
            </i-col>
        </Row>
        <router-view name="modal"></router-view>
    </div>
</template>
<script>
    import top from '@/components/top.vue'
    import Slide from '@/components/slide.vue'
    import tab from '@/pages/recruitMembers/tab.vue'
    let isSearch = false;
    export default {
        name: 'applicant-view',
        data() {
            return {
                tableDropVisible: false,    // 控制"列表设置的显示隐藏"
                soltname: 'mainContent',
                openitem: [],
                userStep:{},//存储人员步骤信息的对象
                searchString: '',
                step_pid:'1',
                user_step:{},//存储当前用户审核到达的步骤及uid 的对象
                //表单header
                tableModel: [
                    {
                        title: '姓名',
                        key: 'real_name',
                        isshow: true,
                        allowHide: false,
                        sortable: true,
                        width: 100,
                        render: (h, params) => {
                            if (isSearch) {
                                params.column.width = 130
                                return h('div',
                                    {
                                        style:{
                                            width: '130px'
                                        }
                                    },
                                    [params.row.real_name,
                                    h('Button', {
                                        style: {
                                            color : '#2b92e9',
                                            padding: '4px 10px'
                                        },
                                        props : {
                                            type : 'text',
                                            icon : 'location'
                                        },
                                        on: {
                                            click: (event) => {
                                                this.locationTree(params.row);
                                                event.stopPropagation();
                                            }
                                        }
                                    },'定位')])
                            }
                            else {
                                return params.row.real_name
                            }
                        }
                    },
                ],
                //表单数据
                lists: [],
                rightSlide : false,
                rightSlideTitle : '',
                currentNode : null,         // 选中的节点
                tempLists : null,           // 临时存储的数据
                nodeOpen : [],              // 打开树形的
                nodeSelect : '',            // 选中node的节点
                asideTitle : '',            // 侧栏标题
                asideViewName : null,       // 侧栏组件名称
                asideViewData: null,         // 向侧栏传递的数据
                currentRow : null,           // 当前表格所选择的列
                navData : [
                    {
                        name : '一、申请入党',
                        zindex : '5',
                        active : true
                    },
                    {
                        name : '二、入党积极分子的确定和培养教育',
                        zindex : '4',
                        active : false
                    },
                    {
                        name : '三、发展对象的确定和考察',
                        zindex : '3',
                        active : false
                    },
                    {
                        name : '四、预备党员的接收',
                        zindex : '2',
                        active : false
                    },
                    {
                        name : '五、预备党员的教育考察和转正',
                        zindex : '1',
                        active : false
                    }
                ]
            }
        },
        computed: {
            tableCol() {
                return this.tableModel.filter((item) => {
                    return item.isshow
                })
            },
            tableFilter:{   //['姓名', '身份证号' ...]
                get(){
                    return this.tableCol.map((item) => {
                        return item.title
                    })
                },
                set(newValue){
                    this.tableModel.forEach((item) => {
                        if (newValue.indexOf( item.title ) != -1) {
                            item.isshow = true
                        }
                        else {
                            item.isshow = false
                        }
                    })
                }
            },
            tableTxt() {
                let that = this
                let qs = require('qs');
                let nodeType = this.currentNode ? parseInt(this.currentNode.data.type_icon) : -1
                if (nodeType > 6 || nodeType < 5) {
                    return '请选择一个党支部/党小组'
                }
                else {
                    if (this.lists.length == 0) {
                        return '暂无数据'
                    };
                }
            }
        },
        components: {
            top,
            Slide,
            tab,
        },
        methods: {
            active(index) {
                let _this = this;
                let qs = require('qs');
                this.navData.forEach(function(item){
                    item.active = false;
                });
                this.navData[index].active = true;
                this.step_pid=index+1;
                console.log(this.step_pid);
                this.axios({
                    method:'post',
                    url:'/v1/recruit/member-list',
                    data:qs.stringify({
                      dept_id:this.$store.state.remberId,
                      step_id:_this.step_pid,
                      keyword:_this.searchString,
                      page_number:'1',
                      page_size:'10',
                    })
                  })
                  .then(res=>{
                  let needData = res.data;
                if (needData.code=='200'){
                  _this.lists= needData.data;
                }else {
                  _this.$Message.error(needData.msg)
                }
              })
              .catch(err => {
                  _this.$Message.error('网络请求异常')
              })
            },
            toggleTableCfg(){
                this.tableDropVisible = !this.tableDropVisible;
            },
            toggleSlide(status){
                if (status) {
                    this.rightSlide = status;
                    return
                };
                this.rightSlide = !this.rightSlide;
                this.$router.push({name : 'applicant'});
            },
            toggleModal(){
                this.modal = !this.modal;
                this.$router.push({name : 'applicant'});
            },
            openAside(){
                this.rightSlide = false
            },
            fetchData(id, isfresh){
                isSearch = false;
                return this.axios({
                    method: 'get',
                    url: '/v1/member/list',
                    params: {
                        dept_id: id,
                        opt: isfresh ? 1 : 0,
                    }
                })
            },
            queryData(id, query, opt){
                let param = Object.assign({
                    dept_id : id,
                    query : query.trim()
                },{
                    page_number : 1,
                    page_size: 20,
                    opt: 0
                },opt);
                return this.axios({
                    method: 'get',
                    url: '/v1/member/filter',
                    params: param
                })
            },
            // 这个不是刷新，是点击左侧树的事件
            reflashList(item, isfresh){
                let _this = this;
                this.currentNode = item;
                this.searchString = '';
                this.currentRow = null; // 清空当前所选的表格行
                let qs = require('qs');
                // 不是党小组
                let nodeType = parseInt(item.data.type_icon);
                if (nodeType > 6 || nodeType < 5) {
                  this.$router.push({
                        name : 'recruitMembers'
                    });
                    this.lists = [];
                    return
                };

              this.axios({
                  method:'post',
                  url:'/v1/recruit/member-list',
                  data:qs.stringify({
                    dept_id:this.$store.state.remberId,
                    step_id:_this.step_pid,
                    keyword:_this.searchString,
                    page_number:'1',
                    page_size:'10',
                  })
                })
                .then(res=>{
                  let needData = res.data;
                  if (needData.code=='200'){
                    _this.lists= needData.data;
                  }else {
                    _this.$Message.error(needData.msg)
                  }
                })
                .catch(err => {
                  _this.$Message.error('网络请求异常')
                })

                this.$router.push({
                    name : 'recruitMembers',
                    params : {
                        dept : item.id
                    }
                });
            },

            refreshTable(){
                this.lists = [];
                this.currentRow = null; // 清空当前所选的表格行
                if (this.currentNode) {
                    this.reflashList(this.currentNode, true);
                };
            },
            search(){
                var _this = this;
                if (this.searchString.trim() == '') {
                    return
                };
                if(this.currentNode){
                    isSearch = true;
                    this.tempLists = [].concat(this.lists);
                    this.queryData(this.currentNode.id, this.searchString).then(res => {
                        if (res.data.code == 200) {
                            _this.lists = res.data.data
                        };
                    })
                    .catch(err => {
                        this.$Message.error('网络请求异常');
                    });
                }
            },
            locationTree(rowData) {
                this.nodeOpen = [];
                rowData.location.forEach( function(item, index) {
                    this.nodeOpen.push(item)
                }, this);

                alert('1');
            },
            slideDown(){
                let _this = this;
                this.nodeSelect = '';
                this.$nextTick(function() {
                    _this.nodeSelect = this.nodeOpen[this.nodeOpen.length-1];
                });


            },
            onTableSelect(data){
//                console.log('route:' ,this.$route, '\n' ,'tableselect', data);
                // this.$emit('onTableSelect', data)
                // this.rightSlide = true;
                this.asideViewName = 'memberInfo';
                // this.asideViewData = data;
                this.asideTitle = data.real_name;
                this.currentRow = data;
                //调用子组件的方法active 方法
                this.$refs.ch.active(data.step_pid-1)
                console.log(data);
                let that =this;
                let qs = require('qs');
              //选择当前人员的获取审核到的步骤
              this.axios({
                  method:'post',
                  url:'/v1/recruit/member-step-check-status',
                  data:qs.stringify({
                    uid:data.id
                  })
                })
                .then(res=>{
                  let needData = res.data;
                  if (needData.code=='200'){
                    console.log(needData,data.step_id);

                    that.user_step.step = data.step_id;
                    that.user_step.uid = data.id;

                  }else {
                    that.$Message.error(needData.msg)
                  }
              })
              .catch(err => {
                  that.$Message.error('网络请求异常')
              })






//                this.$router.push({
//                    name: 'applicantinfo',
//                    params: {
//                        uid: data.id,
//                        dept: this.$route.params.dept
//                    }
//                });
            },
            parseRouter(){
                let _this = this;
                let routerName = this.$route.name;
                let param = this.$route.params;
                switch (routerName) {
                    case 'applicant':
                        console.log('route match:', 'applicant')
                        this.rightSlide = false;
                        break;
                    case 'applicantlist':
                        console.log('route match:', 'applicantlist')
                        this.rightSlide = false;
                        this.fetchData(param.dept, true).then(res => {
                            if (res.data.code == 200) {
                                _this.lists = res.data.data
                            };
                        })
                        .catch(err => {
                            this.$Message.error('网络请求异常');
                        });
                        break;
                    case 'applicantinfo':
                        console.log('route match:', 'applicantinfo')
                        this.rightSlide = true;
                        this.asideViewName = 'memberInfo';
                        break;
                    default:
                      // statements_def
                        break;
                }
            },
        },
        mounted() {
            this.$on('toggleSlide', function(status){
                this.rightSlide = status
            });
            this.$on('refresh', this.refreshTable);
            this.parseRouter();


        },
        watch :{
            rightSlide(val){
                console.log(val)
            },
            '$route' (to, from) {
                // 对路由变化作出响应...
                let routerName = to.name;
                let param = to.params;
                let _this = this;
                switch (routerName) {
                    case 'applicant':
                        console.log('route match:', 'applicant')
                        this.rightSlide = false;
                        break;
                    case 'applicantlist':
                        console.log('route match:', 'applicantlist')
                        this.rightSlide = false;
                        this.fetchData(param.dept, true).then(res => {
                            if (res.data.code == 200) {
                                _this.lists = res.data.data
                            };
                        })
                        .catch(err => {
                            console.log(err);
                            this.$Message.error('网络请求异常');
                        });
                        break;
                    case 'applicantinfo':
                        console.log('route match:', 'applicantinfo')
                        this.rightSlide = true;
                        this.asideViewName = 'memberInfo';
                        break;
                    default:
                      // statements_def
                        break;
                }
            }
        }
    }
</script>
<style scoped>
    .layout{
        position: relative;
    }
    .table-fliter-item{
        padding-left: 10px;
    }
    .setHeight{
        overflow: auto;
    }
    .layout-right-container{
        position: relative;
        height: 100%;
        overflow: auto;
    }
    .layout-content{
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: auto;
    }
    .set-config{
        margin-bottom: 20px;
    }
    .task-step{
        font-size: 0;
        display: inline-block;
        border: 1px solid #ddd;
    }
    .task-step>div{
        font-size: 12px;
        display: inline-block;
        position: relative;
        padding: 0 16px;
        height: 32px;
        line-height: 32px;
        color: #333;
        cursor: pointer;
        background:#fff;
        text-indent: 10px;

    }

    .task-step>div:not(:last-child)::after{
        display: block;
        position: absolute;
        right: -32px;
        top: 0;
        content: "";
        width:0;
        height: 0;
        border: 16px solid transparent;
        border-left-color: #fff;
    }
    .task-step>div:not(:last-child)::before{
        display: block;
        position: absolute;
        right: -33px;
        top: 0;
        content: "";
        width:0;
        height: 0;
        border: 16px solid transparent;
        border-left-color: #ddd;
    }
    .task-step>div.active{
        background: #d73826;
        color: #fff;
    }
    .task-step>div.active:not(:last-child)::after{
         border-left-color: #d73826;
    }
</style>
