<template>
    <div class="box-flex start-box box-orient">
        <div class="info-detail box-flex">
          <Row style="border-bottom: 1px solid #ddd;">
            <Col span="24">
              <p class="box-info">姓名:<span>王叙淳</span></p>
              <p class="box-info">身份证号:<span>120102199207213338</span></p>
              <p class="box-info">原党组织:<span>天房科技党总支</span></p>
              <p class="box-info">目标党组织:<span>天房科技党总支</span></p>
              <p class="box-info">转出组织关系日期:<span>2017-9-15</span></p>
              <p class="box-info">转出党组织联系方式:<span>022-87890021</span></p>
            </Col>
          </Row>
          <Row>
            <Col span="19" style="margin-left: 20px;">
              <Form :model="orgManageForm" label-position="top">
                <FormItem label="驳回理由：" style="margin-top: 20px;">
                  <Input v-model="orgManageForm.textarea" type="textarea" :autosize="{minRows: 5,maxRows: 8}"
                         placeholder="党员因私事短期出国、出境或自费出国留学，因办理保留当即手续，其他组织关系保留在原单位党组织。出国出境定居的党员，应办理溶质党籍手续。"></Input>
                </FormItem>
              </Form>
            </Col>
          </Row>
          <Row>
            <Col span="21" style="margin-left: 20px;">
            <Form :model="orgManageForm" :label-width="120" label-position="right">
              <FormItem label="转入党支部：" style="margin-top: 20px;">
                <Input v-model="orgManageForm.party" type="text" @click.native="popTree" ></Input>
              </FormItem>
              <FormItem label="转入组织关系日期：" style="margin-top: 20px;">
                <DatePicker type="date" placeholder="选择日期" style="width: 100%;" v-model="orgManageForm.date"></DatePicker>
              </FormItem>
              <FormItem label="进入党支部类型：" style="margin-top: 20px;">
                <Select v-model="orgManageForm.select" placeholder="请选择">
                  <Option value="beijing">002</Option>
                  <Option value="shanghai">001</Option>
                  <Option value="shenzhen">003</Option>
                </Select>
              </FormItem>
            </Form>
            </Col>
          </Row>
        </div>
        <div class="info-footer start-box box-align">
            <div class="box-flex"></div>
            <Button type="ghost" style="margin-right: 15px;"  @click="handleReset('formValidate')">取消</Button>
            <Button v-show="isDisable" type="primary" @click="editBtn">编辑</Button>
            <Button v-show="!isDisable" type="error" @click="handleSubmit('formValidate')">保存</Button>
        </div>
      <partyTree v-if="treeShow" @setConfirm="setConfirm" @setCancer="setCancer" :setid="setid"></partyTree>
    </div>
</template>
<script>
    import partyTree from '@/components/pop/org/partyTree.vue'
      export default {
        name: 'orgForm',
        data() {
            return {
                isDisable:true,
                orgManageForm: {
                  prop_type: '',
                },
                treeShow: false,
                setid: '',//编辑的时候传入的id
                ruleValidate: {
                  prop_type: [{
                        required: true, message: '党组织代码不能为空', trigger: 'blur'
                    }],
                },
                datas: this.infodata,
                dangType: [],
                realtive: [],
                voteStyle: []
            }
        },
        props: ['infodata'],
        components: {
          partyTree
        },
        watch: {
            '$route' (to, from) {
                this.getInfo(this.$route.params['id'],1);
                this.getType();
                this.getRealtive();
                this.getVote();
            },
        },
        methods: {
            //党组织类型
            getType() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'D01021',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => that.dangType.push(item))
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            //组织属地关系
            getRealtive() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'D01022',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => that.realtive.push(item))
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            //选举方式
            getVote() {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dictionary/get-list-by-type',
                    params: {
                        type: 'KZ13',
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        needData.data.forEach(item => that.voteStyle.push(item))
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
            editBtn() {
              // console.log(this.$root.$children[0])
              // this.$store.commit('setStrict')
              this.isDisable=!this.isDisable;
              this.$store.commit('setEdit', {isDisable: this.isDisable});
            },
            handleSubmit (name) {
                let that = this;
                console.log(this.formValidate);
                let postData = this.formValidate;
                postData.dept_id = this.$route.params['id'];
                // postData.leadernum = this.formValidate.haved_leaders;
                postData.opartycodept = this.formValidate.partycode;
                // return;
                this.$refs[name].validate((valid) => {
                    console.log(valid)
                    if (valid) {
                        this.isDisable =! this.isDisable;//改变编辑状态
                        let qs = require('qs');
                        this.axios({
                            method: 'get',
                            url: '/v1/dept/modify-dept-base-info',
                            params: postData
                        })
                        .then(res => {
                            let needData = res.data;
                            if (needData.code == 200) {

                            } else {
                                that.$Message.error(needData.msg);
                            }
                        })
                        .catch(err => {
                            this.$Message.error('网络请求异常');
                        })
                    } else {
                        this.$Message.error('表单验证失败!');
                    }
                })
            },
            popTree(){
              this.treeShow = true;
            },
            setConfirm(item) {
              this.treeShow = false;
              this.orgManageForm.party = item.data['name'];
            },
            setCancer() {
              this.treeShow = false;
            },
            handleReset (name) {
//                this.$refs[name].resetFields();
                this.$router.go(-1)
            },
            getInfo(id, type) {
                let that = this;
                let qs = require('qs');
                this.axios({
                    method: 'get',
                    url: '/v1/dept/detail',
                    params: {
                        dept_id: id ? id : 0,
                        opt: type ? type : 0,
                    }
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        that.datas = needData.data;
                        that.formValidate.partycode = that.datas.partycode;
                        that.formValidate.name = that.datas.name;
                        that.formValidate.type_id = that.datas.type_id;
                        that.formValidate.affiliation_id = that.datas.affiliation_id;
                        that.formValidate.found_time = that.datas.found_time;
                        that.formValidate.is_flow = that.datas.is_flow;
                        that.formValidate.start_time = that.datas.start_time;
                        that.formValidate.gap = that.datas.gap;
                        that.formValidate.end_time = that.datas.end_time;
                        that.formValidate.vote_way = that.datas.vote_way;
                        that.formValidate.vote_due = that.datas.vote_due;
                        that.formValidate.vote_actual = that.datas.vote_actual;
                        that.formValidate.leadernum = that.datas.leadernum;
                        that.formValidate.haved_leaders = that.datas.haved_leaders;
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
            },
        },
        created() {

        },
        mounted() {
            let that = this;
            this.$store.commit('setEdit', {isDisable: this.isDisable});
            this.getInfo(this.$route.params['id'], 1);
            this.getType();
            this.getRealtive();
            this.getVote();
        },
    }
</script>
<style scoped>
  .box-info{
    line-height: 40px;
    padding-left: 20px;
    color: #333;
    font-size: 12px;


  }
</style>
