<template>
    <div class="tables" style="width: 1000px;">
        <div class="title text-center">
           <h3 class="text-center" style="margin: 10px 0;">党员基本情况</h3> 
           <p>截至日期：2017年12月31日</p>
        </div>
        
        <div class="start-box box-pack" style="position: relative; top: -16px;">
            <p>填报单位：天房科技党总支</p>
            <p>第二表</p>
        </div>
        <div class="table-outer">
            <table align=center cellspacing=0 cellpadding=0 width="100%">
                <tr>
                    <td width="140" colspan=3 rowspan=2>项目</td>
                    <td style="border-right: none;border-bottom: none;" colspan=2></td>
                    <td colspan=5></td>
                    <td colspan=10>年纪</td>
                </tr>
                <tr>
                    <td style="border-left:none;" colspan=2>总数</td>
                    <td width="50">预备<br>党员</td>
                    <td width="50">女</td>
                    <td width="50">少数<br>名族</td>
                    <td width="50">台湾<br>民族</td>

                    <td width="50">30岁<br>及以下</td>
                    <td width="50">31岁<br>至35岁</td>
                    <td width="50">36岁<br>至40岁</td>
                    <td width="50">41岁<br>至45岁</td>
                    <td width="50">46岁<br>至50岁</td>
                    <td width="50">51岁<br>至55岁</td>
                    <td width="50">56岁<br>至60岁</td>
                    <td width="50">61岁<br>至65岁</td>
                    <td width="50">66岁<br>至70岁</td>
                    <td width="50">71岁<br>及以上</td>
                </tr>
                <tr>
                   <td colspan=3>甲</td> 
                   <td></td>
                   <td><strong>A</strong></td>
                   <td><strong>B</strong></td>
                   <td><strong>C</strong></td>
                   <td><strong>D</strong></td>
                   <td><strong>E</strong></td>
                   <td><strong>F</strong></td>
                   <td><strong>G</strong></td>
                   <td><strong>H</strong></td>
                   <td><strong>I</strong></td>
                   <td><strong>J</strong></td>
                   <td><strong>K</strong></td>
                   <td><strong>L</strong></td>
                   <td><strong>M</strong></td>
                   <td><strong>N</strong></td>
                   <td><strong>O</strong></td>
                </tr>
                <tr v-for="(item, index) in tablesData">

                    <td colspan=3 v-if="item.type == 1">{{item.label}}</td>

                    <td width='20' v-if="item.type == 3"></td>
                    <td colspan=2 v-if="item.type == 3">{{item.label}}</td>
                    
                    <td width='20'  v-if="item.type == 2" rowspan=7>{{item.title}}</td>
                    <td colspan=2  v-if="item.type == 2">{{item.label}}</td>

                    <td width='20'  v-if="item.type == 7" rowspan=8>{{item.title}}</td>
                    <td colspan=2  v-if="item.type == 7">{{item.label}}</td>
                    
                    <td  v-if="item.type == 4" style="border-left: none;" colspan=2>{{item.label}}</td>
                    
                    <td v-if="item.type == 5" width="20" style="border:none;"></td>
                    <td v-if="item.type == 5" style="border-left: none;">{{item.label}}</td>
                    
                    <td v-if="item.type == 6" width="20" style="border-left: none;"></td>
                    <td v-if="item.type == 6" style="border-left: none;">{{item.label}}</td>

                    <td width=30><strong>{{index+1}}</strong></td>

                    <td v-for="(inner, inx) in item.lists">
                        <input type="text" :disabled="inner.disabled" :class="{'yellow2': inner.isYellow}" v-model="inner.value" :style="{'color': inner.disabled ? '#ccc' : inner.class, 'backgroundColor': (index == 0 || index == 1 || index == 2 || inx == 0) ? '#E7F4FE' : (index == 9 || index == 16 || index == 18) ? '#ffece2' : '' }">
                    </td>
                    
                </tr>  
            </table>
            <div class="tips-outer start-box">
                <p>补充资料：</p>
                <div class="tips box-flex">
                    <p>1.能够按时按标准交纳党费<input type="text" v-model="footerVal[0]" class="yellow">名，经批准少交党费的党员<input type="text" class="yellow" v-model="footerVal[1]">名，免交党费的党员<input type="text" class="yellow" v-model="footerVal[2]">名，自愿一次性多交纳1000元以上党费的<input type="text" v-model="footerVal[3]" class="yellow">名。</p>
                    <p>2.生活不能自理、丧失劳动能力的党员<input type="text" v-model="footerVal[4]"  class="yellow">名。</p>
                    <p>3.企事业、民办非企业单位党员中担任高级专业技术职务的<input type="text" v-model="footerVal[5]">名，其中女性<input type="text" v-model="footerVal[6]">名，35岁及以下的<input type="text" v-model="footerVal[7]">名；担任中级专业技术职务的<input type="text" v-model="footerVal[8]">名，其中女性<input type="text" v-model="footerVal[9]">名，35岁及以下的<input type="text" v-model="footerVal[10]">名；担任初级专业技术职务的<input type="text" v-model="footerVal[11]">名，其中女性<input type="text" v-model="footerVal[12]">名，35岁及以下的<input type="text" v-model="footerVal[13]">名。</p>
                </div>
            </div>
        </div>
        <router-view ></router-view>
    </div>
</template>
<script>
	export default {
		name: 'form1',
		data() {
			return {
                msg: 'this is table',
                tablesData: [  
                    {type: 1,title: '', label: '总计',  calc: 'for (let i = 0; i < 15; i++) {this.origin[0].lists[i].value = parseInt(this.origin[1].lists[i].value) + parseInt(this.origin[17].lists[i].value)+ parseInt(this.origin[19].lists[i].value)+ parseInt(this.origin[20].lists[0].value)+ parseInt(this.origin[21].lists[i].value)+ parseInt(this.origin[22].lists[i].value)}', disabled: false, calc: '', bgcolor: "#222", lists: []},
                    {type: 1,title: '', label: '一、在岗职工', calc: 'this.origin[1].lists[0].value = parseInt(this.origin[2].lists[0].value) + parseInt(this.origin[10].lists[0].value)', disabled: false, bgcolor: "#222", lists: []},
                    {type: 7,title: '公共制单位', label: '合计', calc: 'let temp = 0;for (let i = 3; i < 8; i++) { temp += parseInt(this.origin[i].lists[0].value)};this.origin[2].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '党政机关工作人员', calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[3].lists[i].value)};this.origin[3].lists[0].value = temp',  disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '事业单位管理人员', calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[4].lists[i].value)};this.origin[4].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '事业单位专业技术人员', calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[5].lists[i].value)};this.origin[5].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '企业管理人员', calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[6].lists[i].value)};this.origin[6].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '企业专业技术人员', calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[7].lists[i].value)};this.origin[7].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 5, title: '', label: '工勤技能人员', calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[8].lists[i].value)};this.origin[8].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 6, title: '', label: '农民工',  calc: 'let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[9].lists[i].value)};this.origin[9].lists[0].value = temp', disabled: false, bgcolor: "#222", lists: []},
                    {type: 2,title: '非公有制单位', label: '合计', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '企业管理人员', disabled: false, bgcolor: "#222", lists: []}, 
                    {type: 4, title: '', label: '企业专业技术人员', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '民办非企业 单位管理人员', disabled: false, bgcolor: "#222", lists: []},
                    {type: 4, title: '', label: '民办非企业 专业技术人员', disabled: false, bgcolor: "#222", lists: []},
                    {type: 5, title: '', label: '工勤技能人员', disabled: false, bgcolor: "#222", lists: []},
                    {type: 6, title: '', label: '农民工', disabled: false, bgcolor: "#222", lists: []},
                    {type: 1, title: '', label: '二、农牧渔民', disabled: false, bgcolor: "#222", lists: []},
                    {type: 3, title: '', label: '外出务工经商人员', disabled: false, bgcolor: "#222", lists: []},
                    {type: 1, title: '', label: '三、军人、武警', disabled: false, bgcolor: "#222", lists: []},
                    {type: 1, title: '', label: '四、学 生', disabled: false, bgcolor: "#222", lists: []},
                    {type: 1, title: '', label: '五、离退休人员', disabled: false, bgcolor: "#222", lists: []},
                    {type: 1, title: '', label: '其它', disabled: false, bgcolor: "#222", lists: []},
                ],
                orignData: JSON.parse(localStorage.getItem('formData')),
                lists: [], 
                colors: [],
                footers: [],
                footerVal: [],
                origin: {},
			}
		},
        props: {
            orders: {
                type: Object,
                default: function() {
                    return {}
                }
            }
        },
        computed: {
        },
		watch: {
            '$route' (to, from) {
                
            },
            'orders' (newD, oldD) {
                if (newD != oldD) {
                    this.todo(newD)
                };
            }
		},
		methods: {
            todo(item) {
                switch(parseInt(item.type)) {
                    //清空报表
                    case 1: 
                        this.tablesData.forEach(item => {
                            item.lists.forEach(it => {
                                it.value = '';
                            })
                        })
                    break;
                    //报表直统
                    case 2: console.log('报表直统');
                    break;
                    //报表汇总
                    case 3: console.log('报表汇总'); 
                    break;
                    //报表校核
                    case 4: console.log('报表校核'); 
                    break;
                    //打印
                    case 5: console.log('打印'); break;
                    //导出
                    case 6: console.log('导出'); break;
                    //上所解锁
                    case 7: console.log('上所解锁'); break;
                    //开始录制
                    case 8: 
                        this.tablesData.forEach((item, index) => {
                            if (index > 2) {
                                item.lists.forEach((it, inx) => {
                                    if (inx > 0) {
                                      it.disabled = false;  
                                    };                            
                                })
                            };
                        })
                    break;
                    //保存报表
                    case 9: 
                        console.log(this.tablesData)
                    break;
                    default: return;
                }
            },
            sortF(arr) {
                return arr.sort(function(a, b) {
                    return a.key-b.key;
                })
            },
            //查找行数据
            getList(id) {
                let temp = [];
                for(let it in this.orignData.list) {
                    if ( new RegExp( String.fromCharCode(id+65) ).test(it) ) {
                        temp.push({
                            disabled: false,
                            value: it,
                            key: it.substring(1)
                        });
                    };
                }
                return this.sortF(temp);
            },

            //查找列数据
            splitData(id) {
                let temp = [];
                for(let it in this.orignData.list) {
                    if ( parseInt(it.split(it[0])[1]) == parseInt(id)+1 ) {
                        temp.push({
                            disabled: false,
                            value: this.orignData.list[it],
                            orignValue: this.orignData.list[it],
                            key: it.charAt(0).charCodeAt(0),
                            class: ''
                        });
                    };
                }
                return this.sortF(temp);
            },

            //查找列数据
            splitData2(id) {
                let temp = [];
                for(let it in this.orignData.color) {
                    if ( parseInt(it.split(it[0])[1]) == parseInt(id)+1 ) {
                        temp.push(this.orignData.color[it]);
                    };
                }
                return temp;
            },

            //脏数据检测
            checkDuty(duty, k) {
                let that = this;
                for (let i = 0; i < duty.length; i++) {
                    if (duty[i].orignValue != duty[i].value) {
                        that.setColor(k, i, true)
                    } else {
                        that.setColor(k, i, false)
                    }
                };
            },

            // 脏数据 设置颜色
            setColor(k, i, duty) {
                if (duty) {
                    this.origin[k].lists[i].class = 'red';
                } else {
                    this.origin[k].lists[i].class = '';
                }
                
                //eval('for (let i = 5; i < 15; i++) {this.origin[3].lists[0].value += parseInt(this.origin[3].lists[i].value)}');

                // this.origin[0].lists[0].value = parseInt(this.origin[1].lists[0].value) + parseInt(this.origin[17].lists[0].value)+ parseInt(this.origin[19].lists[0].value)+ parseInt(this.origin[20].lists[0].value)+ parseInt(this.origin[21].lists[0].value)+ parseInt(this.origin[22].lists[0].value);
                //this.origin[0].lists[1].value = parseInt(this.origin[1].lists[1].value) + parseInt(this.origin[17].lists[1].value)+ parseInt(this.origin[19].lists[1].value)+ parseInt(this.origin[20].lists[1].value)+ parseInt(this.origin[21].lists[1].value)+ parseInt(this.origin[22].lists[1].value);
                // this.origin[0].lists[2].value = parseInt(this.origin[1].lists[2].value) + parseInt(this.origin[17].lists[2].value)+ parseInt(this.origin[19].lists[2].value)+ parseInt(this.origin[20].lists[2].value)+ parseInt(this.origin[21].lists[2].value)+ parseInt(this.origin[22].lists[2].value);

                //第一行的计算表达式
                for (let i = 0; i < 15; i++) {this.origin[0].lists[i].value = parseInt(this.origin[1].lists[i].value) + parseInt(this.origin[17].lists[i].value)+ parseInt(this.origin[19].lists[i].value)+ parseInt(this.origin[20].lists[0].value)+ parseInt(this.origin[21].lists[i].value)+ parseInt(this.origin[22].lists[i].value)}
            },

            //执行计算表达式
            calcF() {
                this.origin.forEach((item, index) => {
                    if (item.calc) {
                        console.log(item.calc)
                        eval(item.calc)
                    };
                })
            }
		},
		created() {

		},
		mounted() {
            let that = this;
            const count = 15;
            this.tablesData.forEach(item => {
                item.lists.forEach(it => {
                    it.disabled = true;
                })
            })
            
            // 第一步填数据
            this.tablesData.forEach((item, index) => {
                this.tablesData[index].lists = Object.assign(this.splitData(index)); 

                // 当前行数据缺失，手动添加 (count 是写死的，因人而异)
                if (this.tablesData[index].lists.length < count) {
                    for (let j = 1; j < count; j++) {
                        this.tablesData[index].lists.push({
                            disabled: false,
                            value: 0,
                            orignValue: '',
                            key: 65+j,
                            class: ''
                        })
                    };
                };
            })


            // 第二步设置颜色 和 状态
            for (let i = 0; i < this.tablesData.length; i++) {
                that.tablesData[i].lists.forEach((item, index) => {
                    that.tablesData[i].lists[index].disabled = that.splitData2(i)[index] == 2 ? true : false;
                    that.tablesData[i].lists.isYellow = that.splitData2(i)[index] == 1 ? true : false;
                })
            };

            // 获取footer 数据
            for(let its in this.orignData.list) {
                if ( /footer/ig.test(its) ) {
                    this.footers.push({
                        key: its,
                        value: this.orignData.list[its],
                        orignValue: this.orignData.list[its],
                        class: ''
                    });
                };
            }

            //footer 数据填充
            this.footers.forEach((item, index) => {
                let temp = parseInt(item.key.substring(6))-1;
                this.footerVal[temp] = item.value;
            })


            //数据处理完毕 需要保存一份本地的原始数据 用来watch
            this.origin = Object.assign(this.tablesData);

            // 定义多个watch 检测数据改动
            for (let k = 0; k < this.origin.length; k++) {
                this.$watch(function() {
                    return this.origin[k].lists;
                }, function(newV, oldV) {  
                    that.checkDuty(newV, k);
                }, {deep: true}) 
            };

            this.$watch('origin', function(newV, oldV) {
                that.$nextTick(function() {
                    //eval('let temp = 0;for (let i = 5; i < 15; i++) { temp += parseInt(this.origin[3].lists[i].value)};this.origin[3].lists[0].value = temp')
                    // that.calcF();
                    // console.log(this.origin) 
                    // this.origin.forEach(item => {
                    //     if (item.calc) {
                    //         console.log(item.calc)
                    //         eval(item.calc)
                    //     };
                    // })
                    for (let i = 0; i < this.origin.length; i++) {
                        if (this.origin[i].calc) {
                            eval(this.origin[i].calc)
                        };
                    };
                })
                
            },{deep: true});

            eval('let temp = 0;for (let i = 3; i < 8; i++) { temp += parseInt(this.origin[i].lists[0].value)};this.origin[2].lists[0].value = temp');


	    },
	}
</script>
<style scoped>
    .table-outer {
        width: 100%;
        overflow: auto; 
    }
    table tr:first-child td{
        border-top: 1px solid #222;
    }
    table tr td{
        border-bottom: 1px solid #222;
        border-right: 1px solid #222;
        text-align: center;
    }
    table tr td input {
        display: inline-block;
        display: table-cell;
        border: none;
        width: 50px;
        padding-left: 3px;
        text-align: center;
    }
    table tr td:first-child {
        border-left: 1px solid #222;
    }
    .tips-outer {
        margin-top: 15px;
    }
    .tips input {
        width: 60px;
        height: 18px;
        margin: 0 3px;
        padding-left: 3px;
    }
    .tips p {
        line-height: 24px;
    }
    .tables-containter div {
        text-align: center;
    }
    .comm-left {
        width: 120px;
        border: 1px solid #222;
        border-width: 0 1px 0 0;
        height: 100%;
    }
    .wh100 {
        width: 100%;
        height: 100%;
        display: block;
    }
    .tables {
        padding: 15px;
    }
    .tables-containter {
        border: 1px solid #222;
    }
    .tables-header {
        height: 60px;
    }
    .header-top {
        height: 40px;
        border-bottom: 1px solid #222;
        line-height: 40px;
    }
    .header-bottom {
        height: 20px;
        line-height: 20px;
        border-bottom: 1px solid #222;
    }
    .yellow {
        background: #FFF4EE;
        border: none;
        outline: medium;
        border: 1px solid #ccc;
    }
    .yellow2 {
        background: #FFF4EE;
        border: none;
        outline: medium;
    }
    .color-red {
        color: red !important;
    }
</style>
