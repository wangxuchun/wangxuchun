<!--党组织管理/查询统计/组合查询弹窗-->
<template>
  <div class="CombinationQuery">
    <Modal
      v-model="modal1"
      title="组合查询"
      width="950"
      :loading="loading"
      :mask-closable=false
      :closable=false
      class-name="max-height vertical-center-modal"
      @on-ok="ok"
      @on-cancel="cancel">
      <Form style="position: relative" ref="CombinationQueryForm" :model="CombinationQueryForm" :rules="ruleValidate" inline label-position="top">
        <Row style="margin-bottom: 30px;">
          <Col span="24">
          <Table border :columns="columns1" :data="data1"></Table>
          </Col>
        </Row>
        <Row style="color: #999;font-size: 20px;">
          以下功能暂未开放
        </Row>
        <div class="wrap-box" style="background: rgba(255,255,255,0.6);margin-left: -16px;;position: absolute;width: 950px;height: 600px;z-index: 10000;"></div>
        <Row>
          <div class="party"><label class="">当前查询党组织</label>:<span>天房科技党组织</span>
          </div>
          <p class="bold">条件设置</p>
          <Col span="5">
          <FormItem label="选择信息集：" prop="map" style="width: 95%;">
            <Select v-model="CombinationQueryForm.map" placeholder="请选择信息集">
              <Option value="基本信息">基本信息</Option>
              <Option value="1">联系方式</Option>
            </Select>
          </FormItem>
          </Col>
          <Col span="5">
          <FormItem label="选择信息项：" prop="option" style="width: 95%;">
            <Select v-model="CombinationQueryForm.option" placeholder="请选择信息项">
              <Option value="年龄">年龄</Option>
              <Option value="1">党组织代码</Option>
              <Option value="2">党组织类型</Option>
            </Select>
          </FormItem>
          </Col>
          <Col span="5">
          <FormItem label="操作符：" prop="operator" style="width: 95%;">
            <Select v-model="CombinationQueryForm.operator" placeholder="请选择信息项">
              <Option value="等于">等于</Option>
              <Option value="大于">大于</Option>
              <Option value="小于">小于</Option>
            </Select>
          </FormItem>
          </Col>
          <Col span="5">
          <FormItem label="查询值：" prop="value" style="width: 95%;">
            <Input v-model="CombinationQueryForm.value" placeholder="请输入"></Input>
          </FormItem>
          </Col>
          <Col span="4">
          <Button class="fr w100" @click="add">添加</Button>
          </Col>
        </Row>
        <Row>
          <Button class="mr-5" @click="and">并且</Button>
          <Button class="mr-5" @click="or">或者</Button>
          <Button class="mr-5" @click="addLeft">(+</Button>
          <Button class="mr-5" @click="addRight">+)</Button>
          <Button class="mr-5" @click="removeLeft">(-</Button>
          <Button class="mr-5" @click="removeRight">-)</Button>
        </Row>
        <Row>
          <Col span="20">
          <div class="box-wrap">
            <li v-for="(item,index) in condition" class="line-option" @click="clickMe(index)"
                :class="{ selectClass: item.checked==='1' }">{{item.singleCondition}}
            </li>

          </div>
          </Col>
          <Col span="4">
          <Row style="text-align: center;margin-top: 35px">
            <Button class="mb10 w100" @click="upMove">上移</Button>
            <Button class="mb10 w100" @click="downMove">下移</Button>
            <Button class="mb10 w100" @click="singleRemove">删除</Button>
            <Button class="mb10 w100" @click="allRemove">全删</Button>
          </Row>
          </Col>
        </Row>
        <Row style="text-align: center;margin-top: 10px">
          <Button type="error" size="large" class="w100">查询</Button>
          <Button type="warning" size="large" class="ml-10">保存为固定条件</Button>
        </Row>
        <Row style="margin-top: 30px;margin-bottom: 10px;">
          <span class="bold">固定查询条件</span>
          <Input placeholder="请输入固定查询条件ID" style="width: 700px;margin-left: 14px;"></Input>
          <Button class="w100" style="margin-left: 8px;">查询</Button>
        </Row>
        <!--<Row>-->
        <!--<Col span="24">-->
        <!--<Table border :columns="columns1" :data="data1"></Table>-->
        <!--</Col>-->
        <!--</Row>-->
      </Form>
    </Modal>
  </div>
</template>
<script type="text/ecmascript-6">
  export default {
    name: 'CombinationQuery',
    data () {
      return {
        modal1: true,//是否显示弹窗
        loading: true,
        isClass: false,
        queryId:'',//保存固定条件的id
        singleCondition: '',//单行的条件
        condition: [],//保存用户的条件
        itemIndex: '',//保存条件item的index
        CombinationQueryForm: {  //form的绑定
          map: '',//信息集
          option: '',//信息项
          operator: '',//操作符
          value: '',//查询值
        },
        ruleValidate: {
          map: [
            {required: true, message: '请选择信息集', trigger: 'change'}
          ],
          option: [
            {required: true, message: '请选择信息项', trigger: 'change'}
          ],
          operator: [
            {required: true, message: '请选择操作符', trigger: 'change'}
          ],
          value: [
            {required: true, message: '查询值不能为空', trigger: 'blur'}
          ],
        },
        columns1: [
          {
            title: 'ID',
            key: 'id'
          },
          {
            title: '固定条件名称',
            key: 'name'
          },
          {
            title: '类别',
            key: 'is_system'
          },
          {
            title: '操作',
            key: 'action',
            render: (h, params) => {
              return h('div', [
                h('Button', {
                  props: {
                    type: 'text',
                    size: 'small'
                  },
                  on: {
                    click: () => {
//                      console.log(this);
                      this.changeBtnColor(params.index)
                    }
                  }
                }, '使用'),
                h('Button', {
                  props: {
                    type: 'text',
                    size: 'small',
                  },
                  on: {
                    click: () => {
                      this.remove(params.index)
                    }
                  }
                }, '移除')
              ]);
            }
          },
        ],
        data1: [
          {
            id: '000001',
            name: '系统条件一',
            is_system: '系统定义',
          },
          {
            id: '000002',
            name: '条件二',
            is_system: '手动添加',
          },

        ]
      }
    },

    methods: {
      changeBtnColor(index){
        this.queryId = this.data1[index].id;
        let that = this;
        this.axios({
          method:'get',
          url:'/v1/sqlbuilder/sql-info',
          params:{
            id:that.queryId
          }
        }).then(res=>{
          let needData = res.data;
          if(needData.code=='200'){
            that.condition=[];
            needData.data.forEach(item => {
              console.log(item);
              let str='';
              if(item.clink=='and'){
                str =item.lbracket+item.fieldtext+item.operator+item.text+item.rbracket+'并且'
              }else if(item.clink=='or'){
                str =item.lbracket+item.fieldtext+item.operator+item.text+item.rbracket+'或者'
              }
              let obj = {singleCondition: str, checked: 0}
              that.condition.push(obj);
            })
            console.log(that.condition);
          }else{
            that.$Message.error(needData.msg);
          }
        })



        this.$Message.success("使用该条件成功")


      },
      handleSubmit(name) {
        this.$refs[name].validate((valid) => {
          if (valid) {
            this.$Message.success('提交成功!');
            this.modal1 = false;
            this.$router.go(-1)
          } else {
            this.loading = false;
            this.$Message.error('表单验证失败!');
            setTimeout(() => {
              this.loading = true;
            }, 20);
          }
        })
      },
      //并且
      and(){
        //条件的索引
        if (this.itemIndex === '') {
          return
        }
        let index = this.itemIndex;
        //获取原字符串长度
        let len = this.condition[index].singleCondition.length;
        //截取后两位
        let reStr = this.condition[index].singleCondition.slice(len - 2);
        //添加 ) 后赋值
        this.condition[index].singleCondition = this.condition[index].singleCondition.replace(reStr,' 并且');
      },
      //或者
      or(){
        //条件的索引
        if (this.itemIndex === '') {
          return
        }
        let index = this.itemIndex;
        //获取原字符串长度
        let len = this.condition[index].singleCondition.length;
        //截取后两位
        let reStr = this.condition[index].singleCondition.slice(len - 2);
        //添加 ) 后赋值
        this.condition[index].singleCondition = this.condition[index].singleCondition.replace(reStr,' 或者');
      },
      addLeft(){
        //条件的索引
        if (this.itemIndex === '') {
          return
        }
        let index = this.itemIndex;
        //将原有的条件前添加 (
        if (this.condition[index].singleCondition.indexOf("(") > -1) {
          return;
        }
        let data = '( ' + this.condition[index].singleCondition;
        this.condition[index].singleCondition = data;
        console.log(this.condition[index], index);
      },
      addRight(){
        //console.log(obj.target.innerText);
        //条件的索引
        if (this.itemIndex === '') {
          return
        }
        let index = this.itemIndex;
        //将原有的条件前添加 (
        if (this.condition[index].singleCondition.indexOf(")") > -1) {
          return;
        }
        //获取原字符串长度
        let len = this.condition[index].singleCondition.length;
        //截取后两位
        let reStr = this.condition[index].singleCondition.slice(len - 2);
        //添加 ) 后赋值
        this.condition[index].singleCondition = this.condition[index].singleCondition.replace(reStr, ' ) ' + reStr);
      },
      removeLeft(){
        //条件的索引
        if (this.itemIndex === '') {
          return
        }
        let index = this.itemIndex;
        //将原有的条件前添加 (
        this.condition[index].singleCondition = this.condition[index].singleCondition.replace('(', '');
      },
      removeRight(){
        //条件的索引
        if (this.itemIndex === '') {
          return
        }
        let index = this.itemIndex;
        //将原有的条件前添加 (
        this.condition[index].singleCondition = this.condition[index].singleCondition.replace(')', '');
      },
      //添加单个条件
      add(){
        this.singleCondition = this.CombinationQueryForm.map + " " +
          this.CombinationQueryForm.option + " " + this.CombinationQueryForm.operator + " " + this.CombinationQueryForm.value + " 并且";

        let singleConditionObj = {singleCondition: this.singleCondition, checked: 0};// checked 0 未选中 1 选中
        this.condition.push(singleConditionObj);
      },
      //点击选中的条件
      clickMe(index){
        this.condition.forEach(item=> {
          item.checked = '0'
        });
        this.itemIndex = index;
        this.condition[index].checked = '1';
      },
      //上移方法
      upMove(){
        let index = this.itemIndex;
        if (index <= 0)
          return
        let spliceArr = this.condition.splice(index, 1)[0];
        this.condition.splice(index - 1, 0, spliceArr);
        this.itemIndex = index - 1
      },
      //下移方法
      downMove(){
        let index = this.itemIndex;
        let spliceArr = this.condition.splice(index, 1)[0];
        this.condition.splice(index + 1, 0, spliceArr);
        this.itemIndex = index + 1 >= this.condition.length ? this.condition.length - 1 : index + 1;
      },
      //删除单个条件
      singleRemove(){
        let index = this.itemIndex;
        this.condition.splice(index, 1);

      },
      //全部删除
      allRemove(){
        this.condition = [];
      },
      //移除固定列表数据
      remove (index) {
        this.data1.splice(index, 1);
      },
      cancel () {
        this.$Message.info('点击了取消');
        this.$router.go(-1)
      },
      ok(){
        console.log(this.$route.params);
        let dept_id = this.$route.query.dept_id;
        let nodeType = this.$route.query.type;
        let queryId=this.queryId;
        console.log(dept_id,nodeType,queryId,this.$route.query);
//        return;
        this.$router.push({
          name : 'dangyuanlist',
          params : {
            dept : dept_id
          },
          query : {
            type : nodeType
          }
        });


//        this.$router.go(-1);

//        if (/^CombinationQuery$/.test(this.$route.name)) {//党组织
//          this.$router.push({name:'orgManage',params:{ids:ids,queryId:queryId}});
//        }else if(/^dangyuan$/.test(this.$route.name)){
//          type='2';
//        }else if(/^applicantManage$/.test(this.$route.name)){
//          type='3';
//        }else if(/^UnitQuery$/.test(this.$route.name)){//单位
//          this.$router.push({name:'unitManage',params:{queryId:queryId}});
//        }


      },
      getTableList(){
        let that = this;
        let qs=require("qs");
//        let type='1'
//        if (/^CombinationQuery$/.test(this.$route.name)) {//党组织
//          type='1';
//        }else if(/^dangyuan$/.test(this.$route.name)){
//          type='2';
//        }else if(/^applicantManage$/.test(this.$route.name)){
//          type='3';
//        }else if(/^UnitQuery$/.test(this.$route.name)){//单位
//          type='4';
//        }
        this.axios({
            method:'post',
            url:'/v1/sqlbuilder/sql-list',
            data:qs.stringify({
              type:'2'
            })
          })
          .then(res=>{
            let needData = res.data;
            if(needData.code=='200'){
              that.data1 = needData.data;
            }
          })
      },
//      getQuery(){
//        let that = this;
//        let qs=require("qs");
//        this.axios({
//            method:'post',
//            url:'/v1/sqlbuilder/sql-query',
//            data:qs.stringify({
//              data:qs.stringify(
//                that.data1[0]
//              ),
//              type:1,
//              dept_id:that.$store.state.remberId,
//              page_number:'10',
//              page_size:'1'
//            })
//          })
//          .then(res=>{
//            let needData = res.data;
//            if(needData.code=='200'){
//              console.log(needData);
//              that.data1 = needData.data;
//            }
//          })
//      },
    },
    mounted(){
      this.getTableList();
    }
  }
</script>
<style scoped>
  .max-height .ivu-modal-body {
    max-height: 500px;
    overflow-y: auto;
    overflow-x: hidden;
  }

  .party {
    font-size: 12px;
    margin-bottom: 20px;
  }

  .party label {
    font-weight: bold;
  }

  .box-wrap {
    width: 100%;
    height: 180px;
    overflow: auto;
    border: 1px solid #dddee1;
    -webkit-border-radius: 2px;
    -moz-border-radius: 2px;
    border-radius: 2px;;
    margin-top: 20px;
  }

  .bold {
    font-weight: bold;
    font-size: 12px;
    margin-bottom: 10px;
  }

  .fr {
    float: left;
    margin-top: 22px;
    margin-left: 25px;
  }

  .mr-5 {
    margin-right: 10px;
    padding-left: 25px;
    padding-right: 25px;
  }

  .ml-10 {
    margin-right: 26px;
    float: right;
  }

  .mb10 {
    margin-bottom: 10px;
  }

  .w100 {
    width: 100px;
  }

  .line-option {
    padding: 5px 10px;
    font-size: 14px;
    list-style: none;
    line-height: 18px;
    cursor: pointer;
  }

  .line-option.selectClass {
    background: #f1f1f1;
    color: #454545;
  }
</style>
