<template>
  <div>
    <!-- <Button @click="setDefault">click me{{current}}</Button> -->
    <div style="width:100%; overflow-x: auto;">
      <el-tree style="width:auto;"
        :data="lists" 
        :props="defaultProps"
        node-key="nid" 
        :default-expanded-keys="expanded" 
        accordion 
        :indent='8'
        :load="loadNode"
        lazy
        :highlight-current="true" 
        :current-node-key="current"
        @node-click="handleNodeClick" 
        :render-content="renderContent"></el-tree>
    </div>
  </div>
  
</template>
<script>
  import Vue from 'vue'
  import { Tree } from 'element-ui'
  Vue.use(Tree)
  export default {
    name: 'slide',
    data() {
      return {
        lists: [],
        expanded: [],
        current: '',
        defaultProps: {
          children: 'children',
          label: 'name',
          isLeaf: 'isLeaf'
        }
      }
    },
    props: ['openitem', 'currentnode'],
    watch: {
    },
    methods: {
      loadNode(node, resolve) {
        let that = this;
        if (node.level === 0) {
          return;
        }
        setTimeout(function() {
          that.axios({
              method: 'get',
              url: '/v1/trees/list',
              params: {'dept_id': node.data.nid}
          })
          .then(res => {
              let needData = res.data;
              if (needData.code == 200) {
                  resolve(needData.data);
              } else {
                  that.$Message.error(needData.msg);
              }
          })
          .catch(err => {
              that.$Message.error('网络请求异常');
          });
        }, 300)
      },
      setDefault() {
        let that = this;
        this.expanded = [68];
        setTimeout(function() {
          that.current = 798;
        }, 700)
      },
      handleNodeClick(data) {
        let that = this;
        that.current = data.nid;
        that.$emit('reflashList',{id: data.nid})
      },
      getIcon(data) {
        return 'tree-icons tree-icons-'+data.type_icon;
      },
      renderContent(h, { node, data, store }) {
        return (
          <span>
            <span>
              <span class={this.getIcon(data)}></span>
              <span>{node.label}</span>
            </span>
          </span>);
      },
      getTreeData() {
        let qs = require('qs');
        let that = this;   

        this.axios({
            method: 'get',
            url: '/v1/trees/list',
            params: {'dept_id': ''}
        })
        .then(res => {
            let needData = res.data;
            if (needData.code == 200) {
                needData.data.forEach(item => {
                  that.lists.push(item);
                })
                that.$nextTick(function() {
                  that.expanded = [that.lists[0].nid];
                })
            } else {
                that.$Message.error(needData.msg);
            }
        })
        .catch(err => {
            that.$Message.error('网络请求异常');
        }) 
      }
    },
    created() {
      this.getTreeData();
    },
    mounted() {
    },
  }
</script>
<style scope>
  body,html,#app {
    width: 100%;
    height: 100%;
  }

  .layout{
    border: 1px solid #d7dde4;
    background: #f5f7f9;
    position: relative;
  }
  .layout-breadcrumb{
    padding: 10px 15px 0;
  }
  .layout-content{
    min-height: 200px;
    margin: 15px;
    overflow: hidden;
    background: #fff;
    border-radius: 4px;
  }
  .layout-content-main{
    padding: 10px;
  }
  .layout-copy{
    text-align: center;
    padding: 10px 0 20px;
    color: #9ea7b4;
  }
  .layout-menu-left{
    background: #464c5b;
  }
  .layout-header{
    height: 60px;
    background: #fff;
    box-shadow: 0 1px 1px rgba(0,0,0,.1);
  }
  .layout-logo-left{
    width: 90%;
    height: 30px;
    background: #5b6270;
    border-radius: 3px;
    margin: 15px auto;
  }
</style>
