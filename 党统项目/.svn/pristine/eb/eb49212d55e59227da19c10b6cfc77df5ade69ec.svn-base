<!--党员流出弹窗-->
<template>
  <div class="PartyMemberOuter">
    <Modal
      v-model="modal1"
      title="党员出党"
      width="950"
      :loading="loading"
      :styles="{top: '20px'}"
      :mask-closable=false
      class-name="max-height"
      @on-ok="handleSubmit('PartyMemberOuterForm')"
      @on-cancel="cancel">
      <Form ref="PartyMemberOuterForm" :model="PartyMemberOuterForm"  :label-width="150" :rules="ruleValidate">
        <Row>
            <Col span="12">
                <FormItem label="出党日期：" prop="date">
                    <DatePicker type="date"  v-model="PartyMemberOuterForm.date"  placeholder="选择日期" style=""></DatePicker>
                </FormItem>
                <FormItem label="出党原因："  prop="left_reason">
                    <Select v-model="PartyMemberOuterForm.left_reason" filterable placeholder="请选择">
                    	<Option v-for="(item,index) in left_reason_list" :key="item.id" :value="item.id" :disabled="item.choosed==0">{{item.name}}</Option>
                    </Select>
                </FormItem>
                <FormItem label="出党类型："  prop="decrease_type">
                    <Select v-model="PartyMemberOuterForm.decrease_type" placeholder="请选择">
                    	<Option v-for="(key,value) in decrease_type_list" :key="value" :value="value">{{key}}</Option>
                    </Select>
                </FormItem>
            </Col>
        </Row>
      </Form>

    </Modal>
  </div>
</template>
<script TYPE="text/ecmascript-6">
  export default {
    name:'PartyMemberOuter',
    data () {
      return {
        modal1: true,//是否显示弹窗
        loading: true,
        decrease_type_list:'',
        left_reason_list:'',
        uid:this.$route.query.uid,
     		PartyMemberOuterForm:{
           decrease_type:"",
           left_reason :'',
           date :'',
       	},
    		ruleValidate:{
        	date: [
            {required: true, message: '出党日期不能为空',trigger: 'change',type:'date'}
          ],
          decrease_type: [
            {required: true, message: '出党类型不能为空', trigger: 'change'}
          ],
          left_reason: [
            {required: true, message: '出党原因不能为空', trigger: 'change'}
          ],
        },
    		filters:{
          dateFormat(value){
            var date = new Date(+value),
                Y = date.getFullYear(),
                m = date.getMonth() + 1,
                d = date.getDate(),
                H = date.getHours(),
                i = date.getMinutes(),
                s = date.getSeconds();
              if (m < 10) {
                m = '0' + m;
              }
              if (d < 10) {
                d = '0' + d;
              }
              if (H < 10) {
                H = '0' + H;
              }
              if (i < 10) {
                i = '0' + i;
              }
              if (s < 10) {
                s = '0' + s;
              }
              var t = Y + m + d;
              return t;
          }
        },
      }
    },
		mounted (){
			this.getTypeList();
		},
    methods: {
      handleSubmit(name) {
      	var that = this;
        this.$refs[name].validate((valid) => {
          if (valid) {
            this.modal1=false;
						let that = this;
				    let qs = require('qs');
				    let _data = that.PartyMemberOuterForm;
				    _data.dept_id =  that.$store.state.remberNode.nid;
            _data.uid = that.uid;
				    _data.type = 3;
				    _data.date = that.filters.dateFormat(_data.date.getTime());
						this.axios({
						    method: 'POST',
								url: '/v1/member/decrease?uid=xxx',
						    data: qs.stringify(_data),
						})
						.then(res => {
						    let needData = res.data;
						    if (needData.code == 200) {
    						this.$Message.success('提交成功!');
										this.$router.push('/dangyuan');
						    } else {
						        that.$Message.error(needData.msg);
						    }
						})
						.catch(err => {
						    this.$Message.error('网络请求异常');
						})
          } else {
	            this.loading=false;
	            this.$Message.error('表单验证失败!');
	            setTimeout(() => {
	              this.loading=true;
	            }, 20);
          }
        })
      },
      cancel () {
 				this.$router.push('/dangyuan');
      },
      //获取出党原因
      getReason(){
      	var that = this;
      	let qs = require('qs');
				this.axios({
			    method: 'get',
					url: '/v1/dictionary/get-list-by-type',
					params:{
						type:'C02027'
					},
					})
					.then(res => {
					    let needData = res.data;
					    if (needData.code == 200) {
					    	that.left_reason_list = needData.data;
					    } else {
					        that.$Message.error(needData.msg);
					    }
					})
					.catch(err => {
					    this.$Message.error('网络请求异常');
					})
      },

      //获取出档类型
      getTypeList(){
      	var that = this;
      	let qs = require('qs');
				this.axios({
			    method: 'POST',
					url: '/v1/member/out-type-list',
					})
					.then(res => {
					    let needData = res.data;
					    if (needData.code == 200) {
					    	that.decrease_type_list = needData.data;
					    } else {
					        that.$Message.error(needData.msg);
					    }
					})
					.catch(err => {
					    this.$Message.error('网络请求异常');
					})
      },
    }
  }
</script>
<style scope>
.ivu-modal-body{
	min-height: 400px;
}
</style>
