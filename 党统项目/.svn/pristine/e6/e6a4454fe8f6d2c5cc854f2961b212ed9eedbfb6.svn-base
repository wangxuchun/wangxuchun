<template>
<div class="memberinfo-hard start-box box-orient">
    <div class="memberinfo-form box-flex">
        <Form :label-width="0" ref="memberhard" :model="infoform" :rules="ruleValidate">
            <Row>
                <Col span='12'>
                <FormItem class="reset-style" label="困难党员类型">
                    <Select :on-change="hardlifeTypeChange" :disabled="!infoEditStates.hardlife_type" v-model="infoform.hardlife_type">
                            <Option v-for='item in hardlife_type_list' :key="item.id" :value="item.id" :disabled="item.choosed==0">{{item.name}}</Option>
                        </Select>
                </FormItem>
                </Col>
                <Col span='12'>
                <FormItem class="reset-style" label="健康状况" prop="health">
                    <Cascader :disabled="!infoEditStates.health" v-model="infoform.health" :data="health_list"></Cascader>

                    <!-- <Select :disabled="!infoEditStates.health" v-model="infoform.health">
                            <Option v-for='item in health_list' :key="item.id" :value="item.id" :disabled="item.choosed==0">{{item.name}}</Option>
                        </Select> -->
                </FormItem>
                </Col>
            </Row>
            <Row>
                <Col span='12'>
                <FormItem class="reset-style" label="生活困难情况补充">
                    <Input :disabled="!infoEditStates.hardlife_ext" v-model="infoform.hardlife_ext"></Input>
                </FormItem>
                </Col>
                <Col span='12'>
                <FormItem class="reset-style" label="是否享受城镇最低生活保障">
                    <Select :disabled="!infoEditStates.min_guarantee" v-model="infoform.min_guarantee">
                            <Option value="2">否</Option>
                            <Option value="1">是</Option>
                        </Select>
                </FormItem>
                </Col>

            </Row>
            <Row>
                <Col span='12'>
                <FormItem class="reset-style" label="是否享受优抚对象抚恤补助">
                    <Select :disabled="!infoEditStates.is_saved" v-model="infoform.is_saved">
                            <Option value="2">否</Option>
                            <Option value="1">是</Option>
                        </Select>
                </FormItem>
                </Col>
                <Col span='12'>
                <FormItem class="reset-style" label="建国前入党没有工作老党员">
                    <Cascader :disabled="!infoEditStates.before_country_without_job" v-model="infoform.before_country_without_job" :data="before_country_without_job_list"></Cascader>

                    <!-- <Select :disabled="!infoEditStates.before_country_without_job" :transfer="true" placement="top" v-model="infoform.before_country_without_job">
                            <Option v-for='item in before_country_without_job_list' :key="item.id" :value="item.id" :disabled="item.choosed==0">{{item.name}}</Option>
                        </Select> -->
                </FormItem>
                </Col>
            </Row>
        </Form>
    </div>
    <div class="aside-bottom" v-show="editable">
        <Button v-show="!infoEditStates.hardlife_type" @click="toggleEdit" type="primary">编辑</Button>
        <Button v-show="infoEditStates.hardlife_type" @click="cancelEdit" type="ghost">取消</Button>
        <Button v-show="infoEditStates.hardlife_type" @click="reset" type="ghost">重置</Button>
        <Button v-show="infoEditStates.hardlife_type" @click="save('memberhard')" type="primary">保存</Button>
    </div>
</div>
</template>

<script>
export default {
    name: 'memberinfo-hard',
    props: {
        viewdata: null,
        editable: {
            type: Boolean,
            default: true
        }
    },
    data() {

        const validateHealth = (rule, value, callback) => {
            if (this.infoform.hardlife_type != '' && this.infoform.hardlife_type != undefined) {
                if (value == '' || value == undefined) {
                    callback(new Error('请选择健康类型'));
                } else {
                    callback()
                }
            } else {
                callback();
            }
        }

        return {
            infoform: {
                hardlife_type: '',
                health: [],
                min_guarantee: '',
                is_saved: '',
                before_country_without_job: [],
                hardlife_ext: '',
            },
            infoEditStates: {
                hardlife_type: false,
                health: false,
                min_guarantee: false,
                is_saved: false,
                before_country_without_job: false,
                hardlife_ext: false,
            },
            ruleValidate: {
                health: [{
                    validator: validateHealth,
                    trigger: 'change'
                }]
            },
            oldData: {},
            before_country_without_job_list: [],
            hardlife_type_list: [],
            health_list: [],
            currentData: this.viewdata,
            editing: false, // 编辑状态
            url: '/v1/member/edit-hardlife',
            uid: this.$route.params.uid,
            // ruleValidate: {
            //     hardlife_type: [
            //         {required: true, message: '困难党员类型不能为空', trigger: 'change'}
            //     ],
            //     health:[
            //         {required: true, message: '健康状况不能为空', trigger: 'change'}
            //     ],
            // },
        };
    },
    methods: {
        getLastValue (arr){
            if(arr.length==0){
                return ""
            }else{
                return arr.pop();
            }
		},
		getArray (obj){
			return obj.map(function(item){return item.id});
		},
        getList(type, arr) {
            let that = this;
            let qs = require('qs');
            if (that[arr].length > 1) {
                return
            }
            that.axios({
                    method: 'get',
                    url: 'v1/dictionary/get-list-by-type',
                    params: {
                        type: type
                    },
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        setTimeout(() => {
                            that[arr] = needData.data;
                        }, 200);
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                });
        },
        getData() {
            let that = this;
            that.axios({
                    url: '/v1/member/hardlife',
                    method: 'get',
                    params: {
                        uid: that.$route.params.uid,
                    },
                })
                .then(res => {
                    let needData = res.data;
                    if (needData.code == 200) {
                        res.data.data.health = res.data.data.health_array.map(function(a) {
                            return a.id
                        });
                        res.data.data.before_country_without_job = res.data.data.before_country_without_job_array.map(function(a) {
                            return a.id
                        });
                        that.infoform = Object.assign({}, needData.data);
                        that.oldData = Object.assign({}, needData.data);
                        console.log(that.infoform);
                        
                    } else {
                        that.$Message.error(needData.msg);
                    }
                })
                .catch(err => {
                    this.$Message.error('网络请求异常');
                })
        },
        toggleEdit() {
            this.editing = !this.editing;
        },
        hardlifeTypeChange(newVal) {
            console.log('change');
            if (newVal != undefined && newVal != '') {
                for (let i in this.infoEditStates) {
                    this.infoEditStates[i] = true
                }
            } else {
                for (let i in this.infoEditStates) {
                    if (i != 'hardlife_type') {
                        this.infoEditStates[i] = false
                    };
                }
            }
        },
        cancelEdit() {
            let that = this;
            // 不能改变对象的引用 会导致双向绑定失败
            // console.log(that.oldData);
            for (let i in that.oldData) {
                console.log(that.oldData[i])
                that.infoform[i] = that.oldData[i] == 0 ? "" : that.oldData[i];
            }
            that.toggleEdit();
            console.log(that.infoform);
            // that.infoform = that.oldData;
            //that.$refs['infoform'].resetFields();
        },
        reset() {
            let _this = this;
            for (let i in _this.infoform) {
                if(i.indexOf('health')>=0||i.indexOf('before_country_without_job')>=0){
                     _this.infoform[i] = [];
                }else{
                    _this.infoform[i] = "";
                }
                
            }
            this.hardlifeTypeChange(this.infoform.hardlife_type);
        },
        save(name) {
            let that = this;
            this.$refs[name].validate((valid) => {
                console.log(valid);
                if (valid) {
                    let qs = require('qs');
                    let _data = Object.assign({}, this.infoform);
                    _data['uid'] = that.uid;
                    _data['health'] = that.getLastValue(_data['health']);
                    _data['before_country_without_job'] = that.getLastValue(_data['before_country_without_job']);
                    that.axios({
                            method: 'post',
                            url: that.url,
                            data: qs.stringify(_data)
                        })
                        .then(res => {
                            let needData = res.data;
                            if (needData.code == 200) {
                                setTimeout(() => {
                                    that.$Message.success('提交成功!');
                                    that.toggleEdit();
                                    that.getData();
                                }, 200)
                            } else {
                                that.$Message.error(needData.msg);
                            }
                        })
                        .catch(err => {
                            this.$Message.error('网络请求异常');
                        });
                } else {
                    this.$Message.error('表单验证失败!');
                }
            });
        }
    },
    watch: {
        editing(newVal, oldVal) {

            // 启用编辑
            if (newVal) {
                // 禁用 > 开启  
                // hardlife_type 为空只 开启 hardlife_type 
                // hardlife_type 不为空 开启全部
                if (!this.infoEditStates.hardlife_type) {
                    if (this.infoform.hardlife_type == undefined || this.infoform.hardlife_type == "") {
                        this.infoEditStates.hardlife_type = true;
                        for (let i in this.infoEditStates) {
                            if (i !== 'hardlife_type') {
                                this.infoEditStates[i] = false
                            };
                        }
                    } else {
                        for (let i in this.infoEditStates) {
                            this.infoEditStates[i] = true;
                        }
                    }
                }
            }
            // 开启 > 禁用
            else {
                for (let i in this.infoEditStates) {
                    this.infoEditStates[i] = false;
                }
            }
        },
        "infoform.hardlife_type" (newVal, oldVal) {
            // console.log('valuechange hardlife_type:', newVal);
            if (this.editing) {
                this.hardlifeTypeChange(newVal);
            };
        }
    },
    mounted() {
        this.getList('C11001', 'hardlife_type_list');
        this.getList('A01027', 'health_list');
        this.getList('KZ66', 'before_country_without_job_list');
        this.getData();
    },
}
</script>

<style>
.reset-style {
    margin-bottom: 14px;
}

.reset-style .ivu-form-item-label {
    text-align: left;
}

.reset-style .ivu-form-item-content {
    margin-right: 15px;
}
</style>


<style scoped>
.info-detail {
    padding: 0 15px;
}

.memberinfo-hard {
    height: 100%;
}

.memberinfo-form {
    padding: 20px 8px 50px 8px;
}

.memberinfo-avatar {
    display: block;
    margin: auto;
    width: 85px;
    height: 120px;
    vertical-align: middle;
}

.aside-bottom {
    /*position: absolute;*/
    bottom: 0;
    width: 100%;
    border-top: 1px solid #ddd;
    padding: 8px;
    text-align: right;
    background-color: #f8f8f8;
}
</style>