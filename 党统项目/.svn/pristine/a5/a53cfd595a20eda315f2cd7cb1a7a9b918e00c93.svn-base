<template>
    <div class="layout" :style="{'width':'100%','height':'100%'}">
        <!-- 头部 -->
        <top></top>
        <Row type="flex" class="setHeight">
            <!-- 侧边栏树结构 -->
            <i-col span="5" class="layout-menu-left">
                <Slide ref="slide" url="/v1/trees/members-trees" :currentnode="nodeSelect" :openitem="openitem" :openlist="nodeOpen" @slideDown="slideDown" @reflashList="reflashList"></Slide>
            </i-col>
            <i-col span="19" class="layout-right-container">
                <!-- 工具栏 -->
                <div class="layout-breadcrumb">
                    <Button type="ghost" @click="addnew">新增</Button>
                    <Button type="ghost">重置密码</Button>
                    <Button type="ghost">禁用</Button>
                    <Button type="ghost">删除</Button>
                </div>
                <!-- /end 工具栏 -->
                <!-- 表单主结构 -->
                <div class="layout-content" style="position:realtive;">
                    <div class="content-padding">
                        <Table ref="membertable" :highlight-row="true" @on-row-click="onTableSelect" border :columns="tableModel" :data="lists"></Table>
                    </div>
                </div>
                <!-- /end 表单主结构 -->
            </i-col>
        </Row>
        <router-view name="modal"></router-view>
    </div>
</template>
<script>
    import top from '@/components/top.vue'
    import Slide from '@/components/slide.vue'

    let isSearch = false;

    export default {
        name: 'applicant-view',
        data() {
            return {
                tableDropVisible: false,    // 控制"列表设置的显示隐藏"
                soltname: 'mainContent',
                openitem: [],
                searchString: '',
                //表单header
                tableModel: [
                    {
                        title: '姓名',
                        key: 'real_name',
                        sortable: true
                    },
                    {
                        title: '身份证号',
                        key: 'idcard',
                        sortable: true,
                    },
                    {
                        title: '手机号码',
                        key: 'mobile',
                        sortable: true,
                    },
                    {
                        title: '账号状态',
                        key: 'duty_name',
                        sortable: true,
                    },
                    {
                        title: '最后操作时间',
                        key: 'intergrity',
                        sortable: true,
                    }
                ],
                //表单数据
                lists: [],
                currentNode : null,         // 选中的节点
                nodeOpen : [],              // 打开树形的
                nodeSelect : '',            // 选中node的节点
                asideTitle : '',            // 侧栏标题
                asideViewName : null,       // 侧栏组件名称
                asideViewData: null,         // 向侧栏传递的数据
                currentRow : null           // 当前表格所选择的列
            }
        },
        computed: {

        },
        components: {
            top,
            Slide,
        },
        methods: {
            toggleTableCfg(){
                this.tableDropVisible = !this.tableDropVisible;
            },
            toggleSlide(status){
                if (status) {
                    this.rightSlide = status;
                    return
                };
                this.rightSlide = !this.rightSlide;
                this.$router.push({name : 'applicant'});
            },
            toggleModal(){
                this.modal = !this.modal;
                this.$router.push({name : 'applicant'});
            },
            openAside(){
                this.rightSlide = false
            },
            fetchData(id, isfresh){
                isSearch = false;
                return this.axios({
                    method: 'get',
                    url: '/v1/member/list',
                    params: {
                        dept_id: id,
                        opt: isfresh ? 1 : 0,
                    }
                })
            },
            queryData(id, query, opt){
                let param = Object.assign({
                    dept_id : id,
                    query : query.trim()
                },{
                    page_number : 1,
                    page_size: 20,
                    opt: 0
                },opt);
                return this.axios({
                    method: 'get',
                    url: '/v1/member/filter',
                    params: param
                })
            },
            // 这个不是刷新，是点击左侧树的事件
            reflashList(item, isfresh){
                let _this = this;
                this.currentNode = item;
                this.searchString = '';
                this.currentRow = null; // 清空当前所选的表格行
                // 不是党小组
                // let nodeType = parseInt(item.data.type_icon);
                this.$router.push({
                    name : 'adminconfiglist',
                    params : {
                        dept : item.id
                    }
                });
            },
            refreshTable(){
                this.lists = [];
                this.currentRow = null; // 清空当前所选的表格行
                if (this.currentNode) {
                    this.reflashList(this.currentNode, true);
                };
            },

            locationTree(rowData) {
                this.nodeOpen = [];
                rowData.location.forEach( function(item, index) {
                    this.nodeOpen.push(item)
                }, this);
            },
            slideDown(){
                let _this = this;
                this.nodeSelect = '';
                this.$nextTick(function() {
                    _this.nodeSelect = this.nodeOpen[this.nodeOpen.length-1];
                });
            },
            onTableSelect(data){
                console.log('route:' ,this.$route, '\n' ,'tableselect', data);
                // this.$emit('onTableSelect', data)
                // this.rightSlide = true;
                // this.asideViewName = 'memberInfo';
                // this.asideViewData = data;
                // this.asideTitle = data.real_name;
                // this.currentRow = data;
                // this.$router.push({ 
                //     name: 'applicantinfo', 
                //     params: { 
                //         uid: data.id,
                //         dept: this.$route.params.dept
                //     }
                // });
            },
            parseRouter(){
                let _this = this;
                let routerName = this.$route.name;
                let param = this.$route.params;
                switch (routerName) {
                    // case 'applicant':
                    //     console.log('route match:', 'applicant')
                    //     this.rightSlide = false;
                    //     break;
                    // case 'applicantlist':
                    //     console.log('route match:', 'applicantlist')
                    //     this.rightSlide = false;
                    //     this.fetchData(param.dept, true).then(res => {
                    //         if (res.data.code == 200) {
                    //             _this.lists = res.data.data
                    //         };
                    //     })
                    //     .catch(err => {
                    //         this.$Message.error('网络请求异常');
                    //     });
                    //     break;
                    // case 'applicantinfo':
                    //     console.log('route match:', 'applicantinfo')
                    //     this.rightSlide = true;
                    //     this.asideViewName = 'memberInfo';
                    //     break;
                    // default:
                    //   // statements_def
                    //     break;
                }
            },
            addnew(){
                if (this.currentNode) {
                    this.$router.push({
                        name : 'adminconfigadd',
                        params : {
                            dept : this.$route.params.dept
                        }
                    })
                }
                else {
                    this.$Message.info('请选择一个党组织');
                }
            }
        },
        mounted() {
            this.$on('toggleSlide', function(status){
                this.rightSlide = status
            });
            this.$on('refresh', this.refreshTable);
            this.parseRouter();
        },
        watch :{
            rightSlide(val){
                console.log(val)
            },
            '$route' (to, from) {
                // 对路由变化作出响应...
                let routerName = to.name;
                let param = to.params;
                let _this = this;
                switch (routerName) {
                    case 'adminconfiglist':
                        console.log('route match:', 'applicantlist')
                        this.rightSlide = false;
                        this.fetchData(param.dept, true).then(res => {
                            if (res.data.code == 200) {
                                _this.lists = res.data.data
                            };
                        })
                        .catch(err => {
                            console.log(err);
                            this.$Message.error('网络请求异常');
                        });
                        break;
                    default:
                      // statements_def
                        break;
                }
            }
        }
    }
</script>
<style scoped>
    .layout{
        position: relative;
    }
    .table-fliter-item{
        padding-left: 10px;
    }
    .setHeight{
        overflow: auto;
    }
    .layout-right-container{
        position: relative;
        height: 100%;
        overflow: auto;
    }
    .layout-content{
        position: absolute;
        top: 42px;
        left: 0;
        right: 0;
        bottom: 0;
        overflow: auto;
    }
</style>